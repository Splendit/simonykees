# General (DO NOT ADD RULES HERE!)
aa_codename=jSparrow
AbstractSelectRulesWizardPage_descriptionStyledText_librariesLabel=Libraries: 
AbstractSelectRulesWizardPage_descriptionStyledText_librariesNoneLabel=None
AbstractSelectRulesWizardPage_descriptionStyledText_lineDelimiter=\r\n
AbstractSelectRulesWizardPage_descriptionStyledText_minJavaVersionLabel=Minimum Java version: 
AbstractSelectRulesWizardPage_descriptionStyledText_requirementsLabel=Requirements
AbstractSelectRulesWizardPage_descriptionStyledText_tagsLabel=Tags
AbstractSelectRulesWizardPage_error_NoRulesSelected=No rules selected
AbstractSelectRulesWizardPage_warning_RulesInProfileNotApplicable=There are rules in the selected profile, which are not applicable for the current selection.
AbstractSimonykeesHandler_error_activePartId_unknown=activePartId [{0}] unknown
AbstractSimonykeesHandler_error_unexpected_object_editor=unexpected object class in editor [{0}]
AbstractSimonykeesHandler_error_unexpected_object_explorer=unexpected object class in explorer [{0}]
Activator_start=Starting jSparrow
Activator_stop=Stopping jSparrow
BrowserDialog_introTitle=About
BuyLicenseDialog_feedbackLabel=Additional explanation or feedback and suggestions to help us improve jSparrow:
BuyLicenseDialog_opinionLabel=We value your feedback\! Let us know what you think\!
BuyLicenseDialog_purchaseLinkLabel=Continue working with jSparrow by buying a license! Please follow this <a href="https://order.shareit.com/cart/new?vendorid=200267175&PRODUCT%5B300770603%5D=1">link</a>.
BuyLicenseDialog_rateUsLabel=Rate us:
BuyLicenseDialog_reason1=I don't need it / just trying it out.
BuyLicenseDialog_reason2=I would need different rules.
BuyLicenseDialog_reason3=It is too expensive.
BuyLicenseDialog_reason4=The licensing model does not fit my needs.
BuyLicenseDialog_reason5=Tool or handling are too complicated / not intuitive enough.
BuyLicenseDialog_reason6=There is a better / cheaper tool (please indicate which one below).
BuyLicenseDialog_reason7=Other (please explain below).
BuyLicenseDialog_reasonsLabel=Please share your reasons if you decide not to buy a license:
CompareInput_ancestorName=Common
CompareInput_leftName=Left
CompareInput_rightName=Right
CompilationErrorsMessageDialog_compilationErrorDialogMessage=Following files are skipped because they contain compilation errors
CompilationErrorsMessageDialog_compilationErrorDialogTitle=Compilation errors
ConfigureProfileSelectRulesWizardPage_error_EmptyName=Profile name is empty.
ConfigureProfileSelectRulesWizardPage_nameInputLabel=Enter new profile name:
ConfigureProfileSelectRulesWizardPage_nameInputText=New name
ConfigureProfileSelectRulesWIzardPageModel_error_NameExists=Name already in use
DiamondOperatorASTVisitor_using_diamond_operator=Diamond operator can be used instead of type arguments
HelpMessageDialog_default_message=Please visit our home page for more information:
HelpMessageDialog_homepage_url=<a href="https://jsparrow.eu/">https://jsparrow.eu</a>
Java5Profile_profileName=Java 5
Java7Profile_profileName=Java 7
LicenseManager_cannot_reach_licensing_provider_on_checkin=Couldn't reach licensing provider during check-in request
LicenseManager_cannot_reach_licensing_provider_on_prevalidation=Couldn't reach licensing provider during pre-validation
LicenseManager_cannot_read_hardware_information=Cannot read hardware information
LicenseManager_invalid_new_license_key=Invalid new licensee number
LicenseManager_session_check_in=Session checking
LicenseManager_updating_licensee_credentials=Updating licensee credentials
LicenseManager_wait_for_validation_was_interrupted=Wait for validation response was interrupted
LicenseStatus_userMessage_CONNECTION_FAILURE=The jSparrow license server cannot be reached. Please make sure you are connected to the Internet and try again.
LicenseStatus_userMessage_CONNECTION_FAILURE_UNREGISTERED=The jSparrow license server cannot be reached. Please make sure you are connected to the Internet and try again.
LicenseStatus_userMessage_FLOATING_CHECKED_IN=Floating session is released
LicenseStatus_userMessage_FLOATING_CHECKED_OUT=FLOATING_CHECKED_OUT 
LicenseStatus_userMessage_FLOATING_EXPIRED=Your license has expired
LicenseStatus_userMessage_FLOATING_OUT_OF_SESSION=No more open sessions available
LicenseStatus_userMessage_NODE_LOCKED_EXPIRED=Your license has expired
LicenseStatus_userMessage_NODE_LOCKED_HW_ID_FAILURE=This license has already been activated on another computer. Please contact us if you changed hardware recently and want to switch to the new setup permanently.
LicenseStatus_userMessage_NODE_LOCKED_REGISTERED=NODE_LOCKED_REGISTERED
LicenseStatus_userMessage_NONE=NONE
LicenseStatus_userMessage_TRIAL_EXPIRED=Your trial version has expired
LicenseStatus_userMessage_TRIAL_HW_ID_FAILURE=Hardware id does not match
LicenseStatus_userMessage_TRIAL_REGISTERED=TRIAL_REGISTERED
LicenseType_floating=Floating
LicenseType_node_locked=Node locked
LicenseType_subscription=Subscription
LicenseType_try_and_buy=Trial
LicenseValidator_cannot_reach_license_provider_on_validation_call=Couldn't reach licensing provider
LicenseValidator_invalid_licensee_number=Licensee number is not valid.
LicenseValidator_received_validation_response=License validation response received successfully 
LoggerRuleWizard_title=Logging rule
LoggerRuleWizardHandler_info_supportedFrameworkFound=Following supported framework is found and will be used: {0}. Additional configuration, if any is needed, will not be done (e.g. missing files, imports, libraries, ...).
LoggerRuleWizardHandler_noLogger=No supported Logger is currently available. Please add one of the following supported frameworks: org.slf4j, ch.qos.logback or org.apache.log4j.
LoggerRuleWizardPage_description=Configure logging rule
LoggerRuleWizardPage_pageName=Logging rule
LoggerRuleWizardPage_severityLevelLabel=Choose severity level: 
LoggerRuleWizardPage_stackTraceLabel=printStackTrace 
LoggerRuleWizardPage_stackTraceMessageLabel=Applying rule to selected resources will affect printStackTrace and change them with Logger statement with selected severity level.
LoggerRuleWizardPage_sysErrLabel=System.err.print 
LoggerRuleWizardPage_sysErrMessageLabel=Applying rule to selected resources will affect both System.err.print and System.err.println and change them with Logger statement with selected severity level.
LoggerRuleWizardPage_sysOutLabel=System.out.print 
LoggerRuleWizardPage_sysOutMessageLabel=Applying rule to selected resources will affect both System.out.print and System.out.println and change them with Logger statement with selected severity level.
LoggerRuleWizardPageModel_err_noTransformation=No transformation selected
LoggerRuleWizardPageModel_noSeverityLevel=Leave as is
LoggerRuleWizardPageModel_warn_blankLoggingType=No logging type should be left blank
LoggerRuleWizardPageModel_warn_errSeverity=System.err.println shouldn't have lesser severity level than System.out.println
LoggerRuleWizardPageModel_warn_stackTraceSeverity=printStackTrace shouldn't have lesser severity level than System.out.println or System.err.println
Profile_DefaultProfile_profileName=Default
Profile_Java8Profile_profileName=Java 8
ProgressMonitor_AbstractRefactorer_doRefactoring_taskName=Applying rules
ProgressMonitor_AbstractRefactorer_prepareRefactoring_taskName=Adding compilation units
ImmutableStaticFinalCollectionsRule_description=An unmodifiable Collection can be created with the matching Collections.unmodifiable...() method. Some examples are Collections.unmodifiableList(), Collections.unmodifiableSortedSet(), etc.\nA declaration of a Collection with the static and final modifiers is not sufficient because it might still be modifiable.\nThe Collections which are created with Collections.unmodifiable...() throw an UnsupportedOperationException as soon as a modification is attempted.
ImmutableStaticFinalCollectionsRule_name=Replace static final Collections With Collections.unmodifiable...()
ProgressMonitor_SelectRulesWizard_performFinish_jobName=Preparing refactoring
ProgressMonitor_SimonykeesUtil_collectICompilationUnits_taskName=Getting compilation units
RefactoringPreviewWizard_err_runnableWithProgress=Exception occured
RefactoringRule_applying_rule_to_workingcopy=Applying [{0}] to [{1}]
RefactoringRule_default_description=Please set name and description
RefactoringRule_default_name=Missing
RefactoringSummaryWizardPage_description=All changes made by all rules
RefactoringSummaryWizardPage_title=Summary
SelectRulesWizard_end_refactoring=End refactoring from [{0}] in project [{1}]
SelectRulesWizard_rules_with_changes=Rules with changes for project [{0}] are: [{1}]
SelectRulesWizard_start_refactoring=Start refactoring from [{0}] in project [{1}]
SelectRulesWizard_title=Select Rules
SelectRulesWizard_warning_no_refactorings=No refactorings need to be applied!
SelectRulesWizardHandler_allready_running=jSparrow is already running
SelectRulesWizardHandler_multipleProjectsWarning=Please make sure you are starting jSparrow on resources from only one project.
SelectRulesWizardHandler_noFileWithoutError=Selection did not contain any Java files without compilation errors.
SelectRulesWizardPage_addAllButtonLabel=Add all
SelectRulesWizardPage_addButtonLabel=Add
SelectRulesWizardPage_defaultDescriptionText=Description of current selection if only one is selected
SelectRulesWizardPage_description=List of Rules
SelectRulesWizardPage_EmptyProfileLabel=None
SelectRulesWizardPage_emptyString=
SelectRulesWizardPage_filterByName=Filter by name
SelectRulesWizardPage_page_name=Select Rules
SelectRulesWizardPage_removeAllButtonLabel=Remove all
SelectRulesWizardPage_removeButtonLabel=Remove
SelectRulesWizardPage_removeDisabledRulesButtonText=Remove disabled rules
SelectRulesWizardPage_rule_description_default_text=Select a rule on the left side to get more information!
SelectRulesWizardPage_searchString=Search
SelectRulesWizardPage_select_unselect_all=Select / unselect all
SelectRulesWizardPage_selectProfile=Select profile
SelectRulesWizardPage_title=Select Rules
SimonykeesMessageDialog_bugreport_email=<a href="mailto://bugreport@splendit.at">bugreport@splendit.at</a>
SimonykeesMessageDialog_default_error_message=An unexpected Error has occurred\!\nPlease contact Support\!
SimonykeesMessageDialog_open_browser_error_message=Error occurred while opening the link in the browser.
SimonykeesPreferenceManager_builtIn=built-in
SimonykeesPreferencePage_editProfileButtonLabel=Edit...
SimonykeesPreferencePage_enableIntroText=Enable introduction page on startup
SimonykeesPreferencePage_newProfileButtonLabel=New...
SimonykeesPreferencePage_removeProfileButtonLabel=Remove
SimonykeesPreferencePage_rules=Rules
SimonykeesPreferencePage_selectProfile=Select profile
SimonykeesPreferencePage_useProfileOptionNoProfile=No profile
SimonykeesPreferencePage_useProfileOptionRadioGroupTitle=Select rules profile
SimonykeesPreferencePage_useProfileOptionSelectedProfile=Selected profile
SimonykeesPreferencePageLicense_jsparrow_licensed_as=jSparrow licensed as 
SimonykeesPreferencePageLicense_jsparrow_valid_until=Valid until 
SimonykeesPreferencePageLicense_to_obtain_new_license_visit_jsparrow=To obtain a new license, please visit us on <a href="https://jsparrow.eu/">https://jsparrow.eu</a>.
SimonykeesPreferencePageLicense_under_key_label=under license key: 
SimonykeesPreferencePageLicense_update_license_key_button=Update license key
SimonykeesUpdateLicenseDialog_invalid_license_key=Invalid license key. Please get a new license key.
SimonykeesUpdateLicenseDialog_license_updated_successfully=License updated successfully\!
SimonykeesUpdateLicenseDialog_update_license_dialog_group_title=Enter a jSparrow license key
SimonykeesUpdateLicenseDialog_update_license_dialog_label=New license key
SimonykeesUpdateLicenseDialog_update_license_dialog_message=Please enter your new license key below.
SimonykeesUpdateLicenseDialog_update_license_dialog_title=Update license key.
SimonykeesUpdateLicenseDialog_update_llicense_dialog_button=Update
StartDialog_alwaysShowIntroText=Always show welcome at start up
StartDialog_appreciationLabel=We greatly appreciate your suggestions, critique and general feedback in order to further enhance jSparrow\! 
StartDialog_buyLicenseLabel=Want to buy a license?
StartDialog_changesLabel=Changes will only be applied, once you have approved them\!
StartDialog_customizeLabel=For additional customization options, as well as the license status have a look at Window -> Preferences -> jSparrow.
StartDialog_feedbackLabel=Feedback and suggestions:
StartDialog_goodToKnowLabel=Good to know:
StartDialog_guidlinesLinkLabel=For more information, visit our <a href="https://jsparrow.eu/knowledge-base/">Knowledge base</a>.
StartDialog_licenseLinkLabel=Your trial version is valid for 5 days\! <a href="https://order.shareit.com/cart/new?vendorid=200267175&PRODUCT%5B300770603%5D=1">Buy a license.</a>
StartDialog_likeItLabel=How do you like it?
StartDialog_marketplaceLinkLabel=Favourite us on the <a href="https://marketplace.eclipse.org/content/jsparrow-automatical-java-code-improvement">Eclipse Marketplace</a>.
StartDialog_quickStartClickLabel=2. Right click them and select one of the options bellow:
StartDialog_quickStartGoToLabel=1. Choose the desired resources from one of the following views:
StartDialog_quickStartLabel=Quick start in just 2 steps:
StartDialog_rateUsLabel=Rate us: 
StartDialog_thankyouLabel=Thank you for choosing our tool for automatical code improvement\! 
StartDialog_titleLabel=jSparrow - Automatical Java Code Improvement
StartDialog_wantMoreLabel=Want more information?
StartDialog_welcomeLabel=Welcome
ui_cancel=Cancel
ui_ok=OK
ValidateExecutor_shutting_down_validation_scheduler=Shutting down validation scheduler
ValidateExecutor_validation_scheduler_started=Validation scheduler started

# Rules (ONLY ADD RULES HERE!)
ArithmethicAssignmentRule_description=Assignments involving an arithmetic assignment can be simplified by using a compound operator such as '+=', '-=', '/=' or '*='.\n\nFor example, this rule will transform 'a=a+1' into 'a+=1'.\n\nThe rule only applies if both operands are primitive types.
ArithmethicAssignmentRule_name=Replace Assignment with Compound Operator
BracketsToControlRule_description=Transforms single statements after control statements to block constructs by adding curly braces. This improves readability. 
BracketsToControlRule_name=Add Parenthesis to Control Statements
CodeFormatterRule_description=Reformats code according to the coding conventions defined in Eclipse. For example, line breaks will be added if lines are too long. Properly formatted code improves readability and makes collaboration easier.
CodeFormatterRule_name=Reformat Code
CollectionRemoveAllRule_description=Simplifies the code by replacing all occurrences of removeAll() which have the current collection as parameter with clear(). For example, list.removeAll(list) becomes list.clear(). 
CollectionRemoveAllRule_name=Replace removeAll() with clear()
DiamondOperatorRule_description=Since Java 1.7 the Diamond Operator (<>) can be used to simplify instance creation where generics are involved.\n\nFor example, 'Map<String, List<String>> myMap = new HashMap<String, List<String>>()' can be replaced by 'Map<String, List<String>> myMap = new HashMap<>()'.\n\n In order to apply this rule your project must use Java 1.7 or later.
DiamondOperatorRule_name=Remove Explicit Type Argument
EnhancedForLoopToStreamAnyMatchRule_description=Replaces an occurrences of enhanced for-loops which are only used to initialize or return a boolean variable with Stream::anyMatch. The stream syntax is more concise and improves readability.
EnhancedForLoopToStreamAnyMatchRule_name=Replace For-Loop with Stream::anyMatch
EnhancedForLoopToStreamFindFirstRule_description=Enhanced for-loops which are used to find an element within a collection can be replaced by Stream::findFirst. Using the stream syntax a multi-line control statement can be reduced to a single line. 
EnhancedForLoopToStreamFindFirstRule_name=Replace For-Loop with Stream::findFirst
EnhancedForLoopToStreamForEachRule_description=Enhanced For-Loops can be replaced by forEach().\n\nFor example 'for(Item item: items) { }' becomes 'items.forEach()'.\n\nThis makes code more readable and can be combined with other stream functions such as filter and map.
EnhancedForLoopToStreamForEachRule_name=Replace For-Loop with forEach
EnhancedForLoopToStreamSumRule_description=Transforms enhanced for-loops which are only used for summing up the elements of a collection to a Stream::sum invocation
EnhancedForLoopToStreamSumRule_name=Enhanced For-Loop to Stream::sum
EnumsWithoutEqualsRule_name=Replace equals() on Enum constants
EnumsWithoutEqualsRule_description=Replace occurrences of equals() on Enum constants with an identity comparison (==). In the case the equals relation is wrapped with an boolean negation the result will be an not equals (!=).
FieldNameConventionRule_description=Renames all private non-final fields within a class to comply with Java naming conventions. Characters such as underscores or dollar signs used in other languages should be avoided to improve readability.
FieldNameConventionRule_name=Apply Field Naming Conventions
FlatMapInsteadOfNestedLoopsRule_description=Nested For-Loops or invocations of forEach commonly used to iterate over all elements of a collection of collections, can be avoided by using flatMap(). Using flatMap() makes code much more readable and can be combined with other stream functions.
FlatMapInsteadOfNestedLoopsRule_name=Replace Nested Loops with flatMap
ForToForEachRule_description=Since Java 1.5 enhanced for-loops can be used to iterate over collections. This rule replaces old for-loops utilizing iterators with enhanced for-loops in order to improve readability.
ForToForEachRule_name=Use Enhanced For-Loop
FunctionalInterfaceRule_description=Anonymous instances of a functional interface type are replaces by a simple lambda expression. Only instances of functional interfaces can be replaced.  
FunctionalInterfaceRule_name=Use Functional Interfaces
IndexOfToContainsRule_description=This rule replaces calls to indexOf() on instances of String or Collection with calls to the contains() method.\n\nFor example 'l.indexOf(s) >= 0' is transformed to 'l.contains(s)'.\n\n'contains()' was introduced in Java 1.4 and helps to make the code more readable. 
IndexOfToContainsRule_name=Replace indexOf() with contains()
InefficientConstructorRule_description=All calls to a constructor of a primitive type will be replaced by the corresponding static valueOf() method.\n\nFor example 'new Integer("1")' becomes 'Integer.valueOf("1")'. 
InefficientConstructorRule_name=Replace Inefficient Constructors with valueOf()
LambdaForEachCollectRule_description=Replaces 'Stream.forEach' with 'Stream.collect' if the argument of the forEach statement is only used for adding elements to a list.\n\nFor example, 'stream.forEach(x -> list.add)' is transformed into 'stream.collect(Collectors.toList())'.\n\nThis simplifies adding elements to a list.
LambdaForEachCollectRule_name=Use Stream::collect
LambdaForEachIfWrapperToFilterRule_description=If-Statements making up the entire execution block of a Stream::forEach method can be transformed into a call to Stream::filter. This only applies if there are no other statements passed as arguments to forEach(). filter() can be used with other stream functions and improves readability. 
LambdaForEachIfWrapperToFilterRule_name=Use Stream::filter
LambdaForEachMapRule_description=Extracts a block from the body of the consumer of the Stream::forEach method and introduces Stream::map instead. This makes complicated code blocks easier to read and reuse. 
LambdaForEachMapRule_name=Use Stream::map
LambdaToMethodReferenceRule_description=This rule simplifies expression lambdas by using method reference.\n\nFor example, 'personList.forEach(person -> doSomething(person))' becomes 'personList.forEach(this::doSomething)'.\n\nThis rule can only be applied if the parameters of the lambda expression and the method match. 
LambdaToMethodReferenceRule_name=Replace Expression Lambda with Method Reference
MultiCatchRule_description=Java 7 introduced the possibility to merge multiple catch clauses into a single multi-catch clause. Merging is only possible if the catch statements are identical. Using this rule reduces clutter and improves readability.
MultiCatchRule_name=Use Multi-Catch
MultiVariableDeclarationLineRule_description=Code conventions for Java recommend that each variable or field is declared on a separate line. This rule will split declarations occuring on the same lines over multiple lines to improve readability.
MultiVariableDeclarationLineRule_name=Split Multiple Variable Declarations
OrganiseImportsRule_description=Applying this rule has the same effect as Eclipse's built in Organize Imports functionality. It will remove unused imports and sort import statements alphabetically. 
OrganiseImportsRule_name=Organize Imports
OverrideAnnotationRule_description=This rule adds the @Override annotation to methods overriding or implementing parent class methods. Even though using @Override it is not mandatory, using this annotation is considered a best practice for two main reasons: \n 1) It ensures that the method signature is a subsignature of the overridden method (otherwise, a compile error is indicated). \n 2) It improves the readability. 
OverrideAnnotationRule_name=Use @Override Annotation
PrimitiveBoxedForStringRule_description=When calling toString() on a primitive no new instance of that primitive has to be created. This rule replaces occurrences of such code with a static method. For example, 'new Integer(1).toString()' becomes 'Integer.toString(1)'. Applying this rule improves performance. 
PrimitiveBoxedForStringRule_name=Remove Boxing for String Conversions
PrimitiveObjectUseEqualsRule_description=It is recommended that you use equals() on primitive objects. Applying this rule will replace occurrences of \!= and == with equals().\n\nFor example, '"hello" == "world"' will become '"hello".equals("world")'\n\nUsing this rule helps to avoid bugs, as == checks for object reference equality instead of value equality.
PrimitiveObjectUseEqualsRule_name=Use equals() on Primitive Objects
RearrangeClassMembersRule_description=According to Oracle code conventions members of classes and interfaces should appear in the following order:\n 1) Class veriables \n 2) Instance variables \n 3) Constructors \n 4) Methods. \n\nAdditionally, those members should be sorted based on their access modifier. Applying this rule will sort class members to promote readability.
RearrangeClassMembersRule_name=Rearrange Class Members
ReImplementingInterfaceRule_description=Remove interfaces from class declaration, which are already implemented by a super class. These interfaces are inherited from the super class.
ReImplementingInterfaceRule_name=Remove Inherited Interfaces from Class Declaration
RemoveNewStringConstructorRule_description=Removes all class instantiations of String if the constructor parameter is empty or a String itself.\n\nFor example 'new String("StringLiteral")' becomes '"StringLiteral"'. This improves performance and readability.
RemoveNewStringConstructorRule_name=Remove String Constructor
RemoveToStringOnStringRule_description=All method invocations of toString() on a String element are not needed. Applying this rule will remove such method calls.\n\nFor example, '"string".toString()' becomes '"string"'.\n\nThis transformation improves performance.
RemoveToStringOnStringRule_name=Remove toString() on String
SerialVersionUidRule_description=Applying this rule adds the modifiers static and final long variables with the name SerialVersionUID, as this confirms to Java code conventions.\n\nFor example, 'private long serialVersionUID = 1L' becomes 'private static final long serialVersionUID = 1L'.
SerialVersionUidRule_name=Make SerialVersionUID Static Final
StandardLoggerRule_description=Replace System.out.print, System.err.print and Throwable.printStackTrace with logger methods
StandardLoggerRule_name=Standard Logger
StatementLambdaToExpressionRule_description=If the body of a Lambda statement contains only a single expression braces are optional. It can be reduced to a lambda expression by removing the parenthesis.\n\nFor example 'stream.map(x -> { return x*2 })' is replaced by 'stream.map(x -> return x*2)'.\n\nThis makes the code more readable and more concise.
StatementLambdaToExpressionRule_name=Remove Lambda Expression Parenthesis
StringBufferToBuilderRule_description=This rule changes the type of local variables from StringBuffer() to StringBuilder().
StringBufferToBuilderRule_name=StringBuffer() to StringBuilder()
StringBuildingLoopRule_description=Transforms loops which are only used for concatenating a string to an invocation of Stream::collect(Collectors.joining()). \n If the Java compliance level is below 1.8 and at least 1.5, then a StringBulder is introduced for concatenating the values on each iteration of the loop.
StringBuildingLoopRule_name=Replace For-loop with Stream::collect(Collectors.joining())
StringConcatToPlusRule_description=This rule replaces the concat() method on Strings with the '+' operator.\n\nFor example, 's = s.concat("bar")' becomes 's = s + "bar"'. This improves readability and performance for chained concatenations.
StringConcatToPlusRule_name=Replace Concatenation with Infix-Operation
StringFormatLineSeparatorRule_description=This rule replaces any occurrences of '\\n' with '%n'.\n\nFor example 'String.format("\\n\\n")' is replaced by 'String.format("%n%n")'.\n\nThe benefit of this approach is that '%n' is portable across platforms.
StringFormatLineSeparatorRule_name=Use Portable Newline
StringLiteralEqualityCheckRule_description=To avoid NullPointerExceptions, String literals should be placed on the left side when checking for equality.\n\nThis means that 'val.equals("val")' is transformed into '"val".equals(val)'.
StringLiteralEqualityCheckRule_name=Reorder String Equality Check
StringUtilsRule_description=This rule replaces various String methods with their null-safe counterparts from StringUtils.\n\nFor example, '"String".trim()' becomes 'StringUtils.trim("String")'.\n\nUsing this rule makes null pointer exceptions less likely to occur.
StringUtilsRule_name=Use StringUtils Methods
TryWithResourceRule_description=This rule adds the try-with-resources statement introduced in Java 7. Closing statements are removed as the construct takes care of that. Applying this rule makes the code safer and more readable. 
TryWithResourceRule_name=Use Try-With-Resource
UseIsEmptyRule_description=Java 6 introduced isEmpty() on collections and Strings. This rule replaces equality checks involving length() or size() with calls to isEmpty().\n\nFor example, 's.length() == 0' becomes 's.isEmpty()'.\n\nApplying this rule improves readability.
UseIsEmptyRule_name=Replace Equality Check with isEmpty()
WhileToForEachRule_description=Applying this rule replaces While-loops over iterators with an equivalent for-loop. Loops where the body modifies the iterator in some way will not be transformed.
WhileToForEachRule_name=Replace While-Loop With Enhanced For-Loop
