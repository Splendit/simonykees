package eu.jsparrow.standalone;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.maven.shared.invoker.MavenInvocationException;
import org.eclipse.core.internal.events.BuildCommand;
import org.eclipse.core.resources.ICommand;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IProjectDescription;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.jdt.core.IClasspathEntry;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IPackageFragment;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.launching.JavaRuntime;
import org.eclipse.osgi.util.NLS;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import eu.jsparrow.i18n.Messages;

/**
 * Class that contains all configuration needed to run headless version of
 * jSparrow Eclipse plugin.
 * 
 * @author Andreja Sambolec, Matthias Webhofer
 * @since 2.1.1
 */
@SuppressWarnings("restriction")
public class StandaloneConfig {

	private static final Logger logger = LoggerFactory.getLogger(StandaloneConfig.class);

	/**
	 * The dependencies folder name must match with the one declared in
	 * {@link eu.jsparrow.adapter.DependencyManger#OUTPUT_DIRECTORY_PREFIX}.
	 */
	private static final String DEPENDENCIES_FOLDER = "deps"; //$NON-NLS-1$
	private static final String PROJECT_FILE_NAME = ".project"; //$NON-NLS-1$
	private static final String CLASSPATH_FILE_NAME = ".classpath"; //$NON-NLS-1$
	private static final String SETTINGS_DIRECTORY_NAME = ".settings"; //$NON-NLS-1$
	private static final String TEMP_FILE_EXTENSION = ".tmp"; //$NON-NLS-1$
	private static final String USER_DIR = "user.dir"; //$NON-NLS-1$
	private static final String POM_FILE_NAME = "pom.xml"; //$NON-NLS-1$

	private String path;
	private String compilerCompliance;
	private boolean descriptionGenerated = false;
	private boolean cleanUpAlreadyDone = false;
	private boolean existingProjectFileMoved = false;
	private boolean existingClasspathFileMoved = false;
	private boolean existingSettingsDirectoryMoved = false;
	private IProject project = null;
	private IJavaProject javaProject = null;
	private List<ICompilationUnit> compilationUnits = new ArrayList<>();
	private String projectId;
	private String projectName;
	private String sourceFolder;
	private String[] natureIds;

	/**
	 * Constructor that calls setting up of the project and collecting the
	 * compilation units.
	 * 
	 * @param path
	 *            to the folder of the project
	 * @param compilerCompliance
	 *            java version of the project (i.e. "1.8" or "9")
	 * @throws CoreException
	 * @throws MavenInvocationException
	 * @throws IOException
	 */
	public StandaloneConfig(String id, String projectName, String path, String compilerCompliance, String sourceFolder,
			String[] natureIds) throws CoreException, IOException {
		this(id, projectName, path, compilerCompliance, sourceFolder, natureIds, false);
	}

	public StandaloneConfig(String id, String projectName, String path, String compilerCompliance, String sourceFolder,
			String[] natureIds, boolean testMode) throws CoreException, IOException {
		this.projectName = projectName;
		this.projectId = id;
		this.path = path;
		this.compilerCompliance = compilerCompliance;
		this.sourceFolder = sourceFolder;
		this.natureIds = natureIds;

		if (!testMode) {
			setUp();
		}
	}

	/**
	 * Create workspace and load project into it. If a .project file does not
	 * exist, one is generated by using the eclipse maven plugin.
	 * 
	 * @throws CoreException
	 * @throws MavenInvocationException
	 * @throws IOException
	 */
	public void setUp() throws CoreException, IOException {
		IProjectDescription projectDescription = getProjectDescription();
		project = initProject(projectDescription);
		this.javaProject = initJavaProject(project);
		List<IClasspathEntry> mavenClasspathEntries = collectMavenDependenciesAsClasspathEntries();
		mavenClasspathEntries = addProjectSourceConfigurations(mavenClasspathEntries);
		addToClasspath(mavenClasspathEntries);
		compilationUnits = findProjectCompilationUnits();
	}

	/**
	 * Creates a project description on the workspace using the
	 * {@link #getProjectName()} as a project name
	 * 
	 * @return a project description for an eclipse project
	 * @throws IOException
	 */
	IProjectDescription getProjectDescription() throws IOException {
		IWorkspace workspace = getWorkspace();

		backupExistingEclipseFiles();

		logger.debug("Creating project description for {} ", path); //$NON-NLS-1$
		IProjectDescription description = workspace.newProjectDescription(getProjectName());
		description.setLocation(new Path(path));
		description.setNatureIds(natureIds);

		ICommand[] commands = description.getBuildSpec();
		List<ICommand> commandList = Arrays.asList(commands);
		ICommand build = new BuildCommand();
		build.setBuilderName("org.eclipse.m2e.core.maven2Builder"); //$NON-NLS-1$
		List<ICommand> modList = new ArrayList<>(commandList);
		modList.add(build);
		description.setBuildSpec(modList.toArray(new ICommand[] {}));

		return description;
	}

	/**
	 * this method prepares projects for creating an eclipse project accordingly
	 * by renaming any existing .project and .classpath files and the .settings
	 * directory temporarily.
	 * 
	 * @throws IOException
	 */
	protected void backupExistingEclipseFiles() throws IOException {
		File projectDescription = getProjectDescriptionFile();
		File classpathFile = getClasspathFileFile();
		File settingsDirectory = getSettingsDirectoryFile();

		String loggerInfo;

		if (projectDescription.exists()) {
			moveFile(projectDescription, getProjectDescriptionRenameFile());
			existingProjectFileMoved = true;

			loggerInfo = NLS.bind(Messages.StandaloneConfig_fileBackupDone, PROJECT_FILE_NAME);
			logger.debug(loggerInfo);
		}

		if (classpathFile.exists()) {
			moveFile(classpathFile, getClasspathFileRenameFile());
			existingClasspathFileMoved = true;

			loggerInfo = NLS.bind(Messages.StandaloneConfig_fileBackupDone, CLASSPATH_FILE_NAME);
			logger.debug(loggerInfo);
		}

		if (settingsDirectory.exists()) {
			moveFile(settingsDirectory, getSettingsDirectoryRenameFile());
			existingSettingsDirectoryMoved = true;

			loggerInfo = NLS.bind(Messages.StandaloneConfig_directoryBackupDone, SETTINGS_DIRECTORY_NAME);
			logger.debug(loggerInfo);
		}
	}

	/**
	 * this method creates and opens a new {@link IProject}
	 * 
	 * @param description
	 *            project description of the new project
	 * @return a newly created and opened project
	 * @throws CoreException
	 */
	IProject initProject(IProjectDescription description) throws CoreException {
		IWorkspace workspace = getWorkspace();

		IProject iproject = getProject(workspace, description.getName());
		iproject.create(description, new NullProgressMonitor());

		String loggerInfo = NLS.bind(Messages.StandaloneConfig_debug_createProject, description.getName());
		logger.debug(loggerInfo);

		iproject.open(new NullProgressMonitor());

		logger.debug(Messages.StandaloneConfig_debug_createdProject);

		return iproject;
	}

	/**
	 * takes an {@link IProject} and converts it in a java project of type
	 * {@link IJavaProject}. The java version is set here.
	 * 
	 * @param project
	 *            project to convert in a java project
	 * @return a java project
	 * @throws JavaModelException
	 */
	IJavaProject initJavaProject(IProject project) throws JavaModelException {
		logger.debug(Messages.StandaloneConfig_debug_createJavaProject);

		IJavaProject iJavaProject = createJavaProject(project);
		// set compiler compliance level from the project
		iJavaProject.setOption(JavaCore.COMPILER_COMPLIANCE, compilerCompliance);
		iJavaProject.setOption(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, compilerCompliance);
		iJavaProject.setOption(JavaCore.COMPILER_SOURCE, compilerCompliance);

		String loggerInfo = NLS.bind(Messages.StandaloneConfig_CompilerComplianceSetTo, compilerCompliance);
		logger.debug(loggerInfo);

		iJavaProject.open(new NullProgressMonitor());

		return iJavaProject;
	}

	/**
	 * this method gets all {@link ICompilationUnit}s from the project and
	 * returns them.
	 * 
	 * @return list of {@link ICompilationUnit}s on project
	 * @throws JavaModelException
	 */
	List<ICompilationUnit> findProjectCompilationUnits() throws JavaModelException {
		List<ICompilationUnit> units = new ArrayList<>();

		logger.debug(Messages.StandaloneConfig_collectCompilationUnits);
		List<IPackageFragment> packages = Arrays.asList(javaProject.getPackageFragments());
		for (IPackageFragment mypackage : packages) {
			if (mypackage.containsJavaResources() && 0 != mypackage.getCompilationUnits().length) {
				mypackage.open(new NullProgressMonitor());

				units.addAll(Arrays.asList(mypackage.getCompilationUnits()));
			}
		}
		return units;
	}

	/**
	 * Collects all jars from tmp folder in which maven plugin copied
	 * dependencies. Creates {@link IClasspathEntry} for each jar and returns
	 * them.
	 */
	List<IClasspathEntry> collectMavenDependenciesAsClasspathEntries() {
		logger.debug(Messages.StandaloneConfig_debug_collectDependencies);

		List<IClasspathEntry> collectedEntries = new ArrayList<>();

		File depsFolder = getMavenDependencyFolder();
		File[] listOfFiles = depsFolder.listFiles();

		if (null != listOfFiles) {
			logger.debug(Messages.StandaloneConfig_CreateClasspathEntriesForDependencies);
			collectedEntries = createClasspathEntries(listOfFiles);
		}

		return collectedEntries;
	}

	private List<IClasspathEntry> addProjectSourceConfigurations(List<IClasspathEntry> classpathEntries) {
		IPath sourcePath = javaProject.getPath()
			.append(sourceFolder);
		classpathEntries.add(JavaCore.newSourceEntry(sourcePath));
		classpathEntries.add(JavaCore.newContainerEntry(new Path(JavaRuntime.JRE_CONTAINER)));

		// remove duplicated source entries and return
		return classpathEntries.stream()
			.filter(entry -> entry.getEntryKind() != IClasspathEntry.CPE_SOURCE || !entry.getPath()
				.toString()
				.isEmpty())
			.collect(Collectors.toList());
	}

	protected List<IClasspathEntry> createClasspathEntries(File[] listOfFiles) {
		List<IClasspathEntry> collectedEntries = new ArrayList<>();
		for (File file : listOfFiles) {
			if (file.isDirectory()) {
				List<IClasspathEntry> entries = createClasspathEntries(file.listFiles());
				collectedEntries.addAll(entries);
			} else {
				String jarPath = file.toString();
				IClasspathEntry jarEntry = createLibraryClasspathEntry(jarPath);
				collectedEntries.add(jarEntry);
			}
		}
		return collectedEntries;
	}

	/**
	 * Adds all classpath entries on classpath of received java project
	 * 
	 * @param javaProject
	 *            project to which classpath entries should be added
	 * @param classpathEntries
	 *            new entries to be added to classpath
	 * @throws JavaModelException
	 */
	void addToClasspath(List<IClasspathEntry> classpathEntries) throws JavaModelException {

		logger.debug(Messages.StandaloneConfig_ConfigureClasspath);

		if (!classpathEntries.isEmpty()) {
			IClasspathEntry[] newEntries = classpathEntries.toArray(new IClasspathEntry[classpathEntries.size()]);
			javaProject.setRawClasspath(newEntries, null);
		}
	}

	/**
	 * On stop, checks if eclipse project files were existing and backed up
	 * before refactoring and reverts them.
	 * 
	 * @throws IOException
	 */
	private void restoreExistingEclipseFiles() throws IOException {
		logger.debug(Messages.StandaloneConfig_debug_cleanUp);

		String loggerInfo;
		if (existingProjectFileMoved) {
			Files.move(getProjectDescriptionRenameFile().toPath(), getProjectDescriptionFile().toPath());
			loggerInfo = NLS.bind(Messages.StandaloneConfig_fileRestoreDone, PROJECT_FILE_NAME);
			logger.debug(loggerInfo);
		}

		if (existingClasspathFileMoved) {
			Files.move(getClasspathFileRenameFile().toPath(), getClasspathFileFile().toPath());
			loggerInfo = NLS.bind(Messages.StandaloneConfig_fileRestoreDone, CLASSPATH_FILE_NAME);
			logger.debug(loggerInfo);
		}

		if (existingSettingsDirectoryMoved) {
			Files.move(getSettingsDirectoryRenameFile().toPath(), getSettingsDirectoryFile().toPath());
			loggerInfo = NLS.bind(Messages.StandaloneConfig_directoryRestoreDone, SETTINGS_DIRECTORY_NAME);
			logger.debug(loggerInfo);
		}
		cleanUpAlreadyDone = true;
	}

	private void deleteCreatedEclipseProjectFiles() throws IOException, CoreException {
		logger.debug(Messages.StandaloneConfig_debug_cleanUp);

		project.close(new NullProgressMonitor());

		File settings = getSettingsDirectoryFile();
		removeDirectory(settings);
		Files.deleteIfExists(getClasspathFileFile().toPath());
		Files.deleteIfExists(getProjectDescriptionFile().toPath());

	}

	public void revertEclipseProjectFiles() throws IOException, CoreException {
		if (!cleanUpAlreadyDone) {
			deleteCreatedEclipseProjectFiles();
			restoreExistingEclipseFiles();
		}
	}

	public void removeDirectory(File directory) throws IOException {
		if (!directory.isDirectory()) {
			Files.delete(directory.toPath());
			return;
		}
		for (File file : directory.listFiles()) {
			if (file.isDirectory()) {
				removeDirectory(file);
			} else {
				Files.delete(file.toPath());
			}
		}
		Files.delete(directory.toPath());
	}

	/*** HELPER METHODS ***/

	protected IWorkspace getWorkspace() {
		IWorkspace workspace = ResourcesPlugin.getWorkspace();

		String loggerInfo = NLS.bind(Messages.StandaloneConfig_debug_createWorkspace, workspace.getRoot()
			.getLocation()
			.toString());
		logger.debug(loggerInfo);

		return workspace;
	}

	protected File getProjectDescriptionFile() {
		return new File(path + File.separator + PROJECT_FILE_NAME);
	}

	protected File getProjectDescriptionRenameFile() {
		return new File(path + File.separator + PROJECT_FILE_NAME + TEMP_FILE_EXTENSION);
	}

	protected File getClasspathFileRenameFile() {
		return new File(path + File.separator + CLASSPATH_FILE_NAME + TEMP_FILE_EXTENSION);
	}

	protected File getClasspathFileFile() {
		return new File(path + File.separator + CLASSPATH_FILE_NAME);
	}

	protected File getSettingsDirectoryRenameFile() {
		return new File(path + File.separator + SETTINGS_DIRECTORY_NAME + TEMP_FILE_EXTENSION);
	}

	protected File getSettingsDirectoryFile() {
		return new File(path + File.separator + SETTINGS_DIRECTORY_NAME);
	}

	protected String getPomFilePath() {
		return path + File.separator + POM_FILE_NAME;
	}

	protected IProject getProject(IWorkspace workspace, String name) {
		return workspace.getRoot()
			.getProject(name);
	}

	protected IJavaProject createJavaProject(IProject project) {
		return JavaCore.create(project);
	}

	/**
	 * The full path of the dependencies folder must match with the one used in
	 * {@link eu.jsparrow.adapter.DependencyManager#prepareDefaultRequest}.
	 * 
	 * @return the directory with the dependencies.
	 */
	protected File getMavenDependencyFolder() {
		String dependenciesPath = System.getProperty(USER_DIR) + File.separator + DEPENDENCIES_FOLDER + File.separator
				+ getProjectName();
		return new File(dependenciesPath);
	}

	protected IClasspathEntry createLibraryClasspathEntry(String jarPath) {
		return JavaCore.newLibraryEntry(new Path(jarPath), null, null);
	}

	/**
	 * Getter for IJavaProject
	 * 
	 * @return generated IJavaProject
	 */
	public IJavaProject getJavaProject() {
		return javaProject;
	}

	protected void setJavaProject(IJavaProject javaProject) {
		this.javaProject = javaProject;
	}

	protected boolean isDescriptionGenerated() {
		return descriptionGenerated;
	}

	/**
	 * Getter method for list of {@link ICompilationUnit}s collected from the
	 * project.
	 * 
	 * @return list of {@link ICompilationUnit}s collected from the project
	 */
	public List<ICompilationUnit> getICompilationUnits() {
		return compilationUnits;
	}

	protected void moveFile(File src, File dest) throws IOException {
		Files.move(src.toPath(), dest.toPath());
	}

	protected boolean isExistingProjectFileMoved() {
		return existingProjectFileMoved;
	}

	protected boolean isExistingClasspathFileMoved() {
		return existingClasspathFileMoved;
	}

	protected boolean isExistingSettingsDirectoryMoved() {
		return existingSettingsDirectoryMoved;
	}

	public String getProjectId() {
		return this.projectId;
	}

	public String getProjectName() {
		return projectName;
	}

}
