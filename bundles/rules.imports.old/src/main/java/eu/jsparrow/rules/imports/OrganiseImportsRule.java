package eu.jsparrow.rules.imports;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.ISourceRange;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.search.TypeNameMatch;
import org.eclipse.jdt.internal.corext.codemanipulation.OrganizeImportsOperation;
import org.eclipse.jdt.internal.corext.codemanipulation.OrganizeImportsOperation.IChooseImportQuery;
import org.eclipse.jface.text.Document;
import org.eclipse.ltk.core.refactoring.DocumentChange;
import org.eclipse.text.edits.TextEdit;

import eu.jsparrow.rules.common.OrganiseImportsRuleBase;
import eu.jsparrow.rules.common.util.RefactoringUtil;
import eu.jsparrow.rules.common.visitor.AbstractASTRewriteASTVisitor;

/**
 * Organise imports in a Java class, the rule does not use an
 * {@link AbstractASTRewriteASTVisitor} so the abstract class itself can be
 * passed to the constructor. <br>
 * The warning concerning restrictions is generated by a call to
 * {@link OrganizeImportsOperation}, which is an internal Eclipse class
 * 
 * @author Hannes Schweighofer, Ludwig Werzowa, Matthias Webhofer
 * @since 0.9.2
 *
 */

@SuppressWarnings("restriction")
public class OrganiseImportsRule extends OrganiseImportsRuleBase {

	@Override
	protected TextEdit createTextEdits(ICompilationUnit workingCopy, CompilationUnit astRoot,
			boolean[] hasAmbiguity) throws CoreException {
		IChooseImportQuery query = (TypeNameMatch[][] openChoices, ISourceRange[] ranges) -> {
			hasAmbiguity[0] = true;
			return new TypeNameMatch[0];
		};

		OrganizeImportsOperation importsOperation = new OrganizeImportsOperation(workingCopy, astRoot, false, true,
				true, query);
		TextEdit edit = importsOperation.createTextEdit(null);
		if(hasAmbiguity[0] || importsOperation.getParseError() != null) {
			return null;
		}
		return edit;
	}

	@Override
	protected DocumentChange createDocumentChange(TextEdit edit, Document document) {
		return RefactoringUtil.generateDocumentChange(OrganiseImportsRule.class.getSimpleName(), document,
				edit.copy());
	}

}
