# General (DO NOT ADD RULES HERE!)
aa_codename=jSparrow
AbstractSelectRulesWizardPage_descriptionStyledText_librariesLabel=Libraries: 
AbstractSelectRulesWizardPage_descriptionStyledText_librariesNoneLabel=None
AbstractSelectRulesWizardPage_descriptionStyledText_lineDelimiter=\r\n
AbstractSelectRulesWizardPage_descriptionStyledText_minJavaVersionLabel=Minimum Java version: 
AbstractSelectRulesWizardPage_descriptionStyledText_requirementsLabel=Requirements
AbstractSelectRulesWizardPage_descriptionStyledText_tagsLabel=Tags
AbstractSelectRulesWizardPage_error_NoRulesSelected=No rules selected
AbstractSelectRulesWizardPage_freemiumRegirementsMessage=Free with email registration
AbstractSelectRulesWizardPage_neitherRegisteredNorLicensed_statusInfoMessage=For applying rules you have to have a license or be registered. Please go to jSparrow Dashboard for buying a license or registering.
AbstractSelectRulesWizardPage_notOnlyFreemiumSelected_statusInfoMessage=Some of the selected rules are not free. You will be able to preview changes but unable to apply any of them.
AbstractSelectRulesWizardPage_seeDocumentation=See Documentation
AbstractSelectRulesWizardPage_warning_RulesInProfileNotApplicable=Some rules in the selected profile are not applicable on the selected sources.
AbstractSimonykeesHandler_error_activePartId_unknown=activePartId [{0}] unknown
AbstractSimonykeesHandler_error_unexpected_object_editor=unexpected object class in editor [{0}]
AbstractSimonykeesHandler_error_unexpected_object_explorer=unexpected object class in explorer [{0}]
AbstractSummaryWizardPage_fileTableViewerTitle=Affected Files
AbstractSummaryWizardPage_fileTableViewerToolTipText=Files affected by the rules
AbstractSummaryWizardPage_rulesPerFileTableViewerTitle=Rules Applied
AbstractSummaryWizardPage_rulesPerFileTableViewerToolTipText=Rules having at least one finding in the selected file
AbstractSummaryWizardPage_ruleTableViewerRuleToolTipText=Rules with findings
AbstractSummaryWizardPage_ruleTableViewerTimesAppliedToolTipText=Total number of findings per rule
AbstractSummaryWizardPage_ruleTableViewerTimeSavedToolTipText=Estimated time saved per rule
AbstractSummaryWizardPage_searchBoxToolTipText=Search for files or rules
AbstractSummaryWizardPage_searchLabel=Search
ActivationControl_acitvationSuccessfulTitle=jSparrow activation successful
ActivationControl_activateButton=Activate
ActivationControl_activationFailedText=Activation failed. \n\nPlease verify that you have entered a valid registration key.
ActivationControl_activationFailedTitle=jSparrow activation failed
ActivationControl_cancelButton=Cancel
ActivationControl_enterLicenseLabel=Enter the registration key received by email:
ActivationControl_invalidLicenseLabel=Please provide a valid license key
ActivationControl_licenseValidityExplanationText=The registration key is valid for one activation only. If you have already used the registration key, please register again to get a new registration key.
ActivationControl_statusLabel=Contacting server . . . 
ActivationControl_successfulActivationText=Your activation was successful\!\n\nEnjoy using 15 free rules to improve your code base.
Activator_couldNotDeleteFileWithPath=Could not delete file: {0}
Activator_debug_collectCompilationUnits=Getting compilation units on {0}
Activator_debug_commitRefactoring=Committing refactoring changes to compilation units on {0}
Activator_debug_createRefactoringStates=Creating refactoring states
Activator_debug_numCompilationUnits=Number of compilation units: {0}
Activator_debug_numRefactoringStates=Number of refactoring states: {0} 
Activator_debug_startRefactoring=Starting refactoring process on {0}
Activator_start=Starting jSparrow
Activator_stop=Stopping jSparrow
Activator_standalone_SelectedProfile=Selected profile: {0}
Activator_standalone_SelectedRules=Selected rules ({0}): {1}
Activator_standalone_DefaultProfileDoesNotExist=Profile [{0}] does not exist
Activator_standalone_RulesDoNotExist=The following rules do not exist: {0}
Activator_standalone_None=None
Activator_standalone_noRulesSelected=No rule with satisfied requirements selected
BrowserDialog_introTitle=About
BufferedReaderLinesRule_description=Replaces loops iterating over lines of a file by BufferedReader::lines stream.
BufferedReaderLinesRule_name=Use BufferedReader::lines
BuyLicenseDialog_feedbackLabel=Additional explanation or feedback and suggestions to help us improve jSparrow:
BuyLicenseDialog_opinionLabel=We would love to hear your feedback\! Let us know what you think\!
BuyLicenseDialog_purchaseLinkLabel=Using the free version of jSparrow, you can view a summary of all changes but not apply them. Upgrade your license <a href="https://order.shareit.com/cart/new?vendorid=200267175&PRODUCT%5B300770603%5D=1">here</a>.
BuyLicenseDialog_rateUsLabel=Rate us:
BuyLicenseDialog_reason1=I don't need it / just trying it out.
BuyLicenseDialog_reason2=I would need different rules.
BuyLicenseDialog_reason3=It is too expensive.
BuyLicenseDialog_reason4=The licensing model does not fit my needs.
BuyLicenseDialog_reason5=Tool or handling are too complicated / not intuitive enough.
BuyLicenseDialog_reason6=There is a better / cheaper tool (please indicate which one below).
BuyLicenseDialog_reason7=Other (please explain below).
BuyLicenseDialog_reasonsLabel=Please share your reasons if you decide not to buy a license:
BuyLicenseDialog_TitleMessage_LicenseHasExpired=Your free license has expired.
CompareInput_ancestorName=Common
CompareInput_leftName=Left
CompareInput_rightName=Right
CompilationErrorsMessageDialog_compilationErrorDialogMessage=Following files are skipped because they contain compilation errors
CompilationErrorsMessageDialog_compilationErrorDialogTitle=Compilation errors
ConfigureProfileSelectRulesWizardPage_error_EmptyName=The profile name is empty
ConfigureProfileSelectRulesWizardPage_nameInputLabel=Enter new profile name:
ConfigureProfileSelectRulesWizardPage_nameInputText=New name
ConfigureProfileSelectRulesWizardPageModel_error_NameExists=This name is already in use
ConfigureProfileSelectRulesWIzardPageModel_error_nameReserved=The name "{0}" is reserved
ConfigureRenameFieldsRuleWizard_WizardTitle_RenameFields=Rename fields
DateDeprecatedRule_description=Removes deprecated Date constructs which are obsolete since JDK version 1.1.
DateDeprecatedRule_name=Remove Deprecated Date Constructs
DiamondOperatorASTVisitor_using_diamond_operator=Diamond operator can be used instead of type arguments
HelpMessageDialog_default_message=For more information, please have a look at the following resources:\n - jSparrow Documentation: {0}\n - jSparrow Website: {1}\n\nFor support, please contact us via email {2} or visit our {3}.
HelpMessageDialog_homepage_url=<a href="https://jsparrow.eu/">https://jsparrow.eu</a>
HelpMessageDialog_documentation_url=<a href="https://jsparrow.github.io/">https://jsparrow.github.io</a>
HelpMessageDialog_support_mail=<a href="mailto:support@jsparrow.eu">support@jsparrow.eu</a>
HelpMessageDialog_support_url=<a href="https://jsparrow.atlassian.net/servicedesk/customer/portal/1">Customer Portal</a>
HideDefaultConstructorInUtilityClassesRule_description=Utility classes are classes containing static properties only. Those classes should not be instantiated. A private constructor, throwing an IllegalStateException, is introduced to utility classes by this rule, unless they already have another declared constructor. This hides the default public constructor and thus prevents the instantiation of such a class.
HideDefaultConstructorInUtilityClassesRule_name=Hide Default Constructor In Utility Classes
Java5Profile_profileName=Java 5
Java7Profile_profileName=Java 7
LicenseManager_cannot_reach_licensing_provider_on_checkin=Couldn't reach licensing provider during check-in request
LicenseManager_cannot_reach_licensing_provider_on_prevalidation=Couldn't reach licensing provider during pre-validation
LicenseManager_cannot_read_hardware_information=Cannot read hardware information
LicenseManager_invalid_new_license_key=Invalid new licensee number
LicenseManager_session_check_in=Session checking
LicenseManager_updating_licensee_credentials=Updating licensee credentials
LicenseManager_wait_for_validation_was_interrupted=Wait for validation response was interrupted
LicenseStatus_userMessage_CONNECTION_FAILURE=The jSparrow license server cannot be reached. Please make sure you are connected to the Internet and try again.
LicenseStatus_userMessage_CONNECTION_FAILURE_UNREGISTERED=The jSparrow license server cannot be reached. Please make sure you are connected to the Internet and try again.
LicenseStatus_userMessage_FLOATING_CHECKED_IN=Floating session is released
LicenseStatus_userMessage_FLOATING_CHECKED_OUT=FLOATING_CHECKED_OUT 
LicenseStatus_userMessage_FLOATING_EXPIRED=Your jSparrow Pro license has expired.
LicenseStatus_userMessage_FLOATING_OUT_OF_SESSION=No more open sessions available
LicenseStatus_userMessage_NODE_LOCKED_EXPIRED=Your jSparrow Pro license has expired.
LicenseStatus_userMessage_NODE_LOCKED_HW_ID_FAILURE=This license has already been activated on another computer. Please contact us if you changed hardware recently and want to switch to the new setup permanently. Until then, your license will be treated as a free license.
LicenseStatus_userMessage_NODE_LOCKED_REGISTERED=NODE_LOCKED_REGISTERED
LicenseStatus_userMessage_NONE=NONE
LicenseStatus_userMessage_FREE_EXPIRED=You are using the free version of jSparrow
LicenseStatus_userMessage_FREE_HW_ID_FAILURE=Hardware id does not match
LicenseStatus_userMessage_FREE_REGISTERED=FREE_REGISTERED
LicenseType_floating=Floating
LicenseType_node_locked=Node locked
LicenseType_subscription=Subscription
LicenseType_try_and_buy=Free
LicenseUtil_EmptyLicense=No license was entered.
LicenseUtil_invalidLicenseFormat=Invalid license format.
LicenseValidator_cannot_reach_license_provider_on_validation_call=Couldn't reach licensing provider
LicenseValidator_invalid_licensee_number=Licensee number is not valid.
LicenseValidator_received_validation_response=License validation response received successfully 
ListRulesUtil_Description=Description
ListRulesUtil_ID=ID
ListRulesUtil_Name=Name
ListRulesUtil_NoRulesAvailable=No rules available\!
LocalVariableTypeInferenceRule_description=Replaces the types on local variable declarations with 'var'.\n\nFor example, 'ZonedDateTime date = ZonedDateTime.now();' will be transformed to 'var date = ZonedDateTime.now();'. Additionally, the rule transforms also the declaration of the parameters in enhanced for loops. For example:\n\n\t for(Map.Entry<String, String> entry : map.entrySet()) { \n\t\t ... \n\t}\n\n will be transformed to \n\n\t for(var entry : map.entrySet()) { \n\t\t ... \n\t}
LocalVariableTypeInferenceRule_name=Use Local Variable Type Inference
LoggerRuleWizard_title=System Out To Logging
LoggerRuleWizardHandler_info_supportedFrameworkFound=Following supported framework is found and will be used: {0}. Additional configuration, if any is needed, will not be done (e.g. missing files, imports, libraries, ...).
LoggerRuleWizardHandler_loggerRuleOnOneProjectOnly=The Logger Rule can only be executed on one project at a time.
LoggerRuleWizardHandler_multipleProjectsSelected=Multiple Projects Selected\!
LoggerRuleWizardHandler_noLogger=No supported Logger is currently available. Please add one of the following supported frameworks: org.slf4j, ch.qos.logback or org.apache.log4j.
LoggerRuleWizardPage_alwaysAddExceptionParamInLoggerStatement=Always add the exceptions as a parameter in logger statements.
LoggerRuleWizardPage_alwaysUsePrintStacktraceOptionForLoggingException=Always use this severity level for logging exceptions.
LoggerRuleWizardPage_default_log_for_exception_example_after=\n logger.error(e.getMessage(), e); \n
LoggerRuleWizardPage_default_log_for_exception_example_before=\n System.out.println(e.getMessage()); \n
LoggerRuleWizardPage_default_log_for_exception_popup_description=Use this severity level for replacing standard output statements that are printing messages related to an exception. For example, if the selected severity level for System.out is info and for logging exceptions is error, then the following code:
LoggerRuleWizardPage_description=Configure logging rule
LoggerRuleWizardPage_insertNewLoggerStatementInEmptyCatch=Insert a logger statement with the selected level for unlogged exceptions.
LoggerRuleWizardPage_log_exception_object_example_after=\n logger.info(e.getMessage(), e); \n
LoggerRuleWizardPage_log_exception_object_example_before=\n System.out.println(e.getMessage()); \n
LoggerRuleWizardPage_log_exception_object_popup_description=Put the exception as a parameter in the logger statement. For example, the following code:
LoggerRuleWizardPage_loggingExceptionsLabel=Logging exceptions
LoggerRuleWizardPage_missing_logger_example_after=\n try { \n\t FileUtils.writeStringToFile(file, value); \n } catch (IOException e) {\n\t logger.error(e.getMessage(), e);\n }\n
LoggerRuleWizardPage_missing_logger_example_before=\n try { \n\t FileUtils.writeStringToFile(file, value); \n } catch (IOException e) {\n \n }\n
LoggerRuleWizardPage_missing_logger_pupup_description=Insert a new logger statement in the catch clauses that are not logging the exceptions. For example, assuming that the selected severity  level is error, the following code: 
LoggerRuleWizardPage_pageName=Logging rule
LoggerRuleWizardPage_print_stack_trace_example_after=\n logger.error(e.getMessage(), e); \t\n
LoggerRuleWizardPage_print_stack_trace_example_before=\n e.printStackTrace(); \t \n
LoggerRuleWizardPage_print_stack_trace_popup_description=Replace the occurrences of Throwable.printStackTrace by a logger statement with the selected severity level. For example if the selected severity level  is error, then the following code: 
LoggerRuleWizardPage_replacePrintstacktraceWithLogger=Replace printStackTrace by a logger statement with selected level.
LoggerRuleWizardPage_severityLevelLabel=Choose severity level: 
LoggerRuleWizardPage_sysErrLabel=System.err.print 
LoggerRuleWizardPage_sysErrMessageLabel=Applying the rule to the selected resources will affect both System.err.print and System.err.println and change them with Logger statement with selected severity level.
LoggerRuleWizardPage_sysOutLabel=System.out.print 
LoggerRuleWizardPage_sysOutMessageLabel=Applying rule to selected resources will affect both System.out.print and System.out.println and change them with Logger statement with selected severity level.
LoggerRuleWizardPage_will_be_transformed_to=will be transformed into:
LoggerRuleWizardPageModel_err_noTransformation=No transformation selected
LoggerRuleWizardPageModel_noSeverityLevel=Leave as is
LoggerRuleWizardPageModel_warn_blankLoggingType=No logging type should be left blank
LoggerRuleWizardPageModel_warn_errSeverity=System.err.println shouldn't have lower severity level than System.out.println
LoggerRuleWizardPageModel_warn_missingLoggSeverity=The newly inserted logging statement shouldn't have lower severity level than printStackTrace.
LoggerRuleWizardPageModel_warn_stackTraceSeverity=printStackTrace shouldn't have lower severity level than System.out.println or System.err.println
Profile_DefaultProfile_profileName=Default
Profile_FreeRulesProfile_profileName=Free Rules
Profile_Java8Profile_profileName=Java 8
ProgressMonitor_AbstractRefactorer_doRefactoring_taskName=Applying rules
ProgressMonitor_AbstractRefactorer_prepareRefactoring_taskName=Adding compilation units
ProgressMonitor_calculating_possible_refactorings=Calculating possible changes
ProgressMonitor_searching_for_references=Searching for references
ImmutableStaticFinalCollectionsRule_description=An unmodifiable Collection can be created with the matching Collections.unmodifiable...() method. Some examples are Collections.unmodifiableList(), Collections.unmodifiableSortedSet(), etc.\nA declaration of a Collection with the static and final modifiers is not sufficient because it might still be modifiable.\nThe Collections which are created with Collections.unmodifiable...() throw an UnsupportedOperationException as soon as a modification is attempted.
ImmutableStaticFinalCollectionsRule_name=Replace static final Collections with Collections.unmodifiable...()
ProgressMonitor_SimonykeesUtil_collectICompilationUnits_taskName=Getting compilation units
ProgressMonitor_SimonykeesUtil_collectICompilationUnits_taskName=Getting compilation units
ProgressMonitor_verifying_project_information=Verifying project information
ProxyConfiguration_CouldNotGetProxyServiceInstance=Could not retrieve a proxy service instance
ProxySettings_portMustBeBetween0And65535=Port must have a value between 0 and 65535. {0} is invalid\!
ProxySettings_poxyOnlySupportsHTTPorHTTPS=The proxy only supports HTTPS or HTTP
PublicFieldsRenamingRule_description=Renames the non-final fields to comply with the naming convention: "^[a-z][a-zA-Z0-9]*$" i.e. a lower case prefix followed by any sequence of alpha-numeric characters.
PublicFieldsRenamingRule_name=Rename Fields
RefactoringPipeline_AddingCompilationUnitToErrorList=Adding compilation unit to errorList: {0}
RefactoringPipeline_CompilationUnitWithCompilationErrors=Skipping compilation unit with compilation error(s): [{0}], problem(s): [{1}]
RefactoringPipeline_java_element_resolution_failed=Could not get compilation unit from java elements
RefactoringPipeline_user_java_element_resolution_failed=Error parsing java files,\n please check your workspace and try again.
RefactoringPipeline_user_warn_no_compilation_units_found=
RefactoringPipeline_warn_no_compilation_units_found=
RefactoringPreviewWizard_err_runnableWithProgress=Exception occurred
RefactoringRule_applying_rule_to_workingcopy=Applying [{0}] to [{1}]
RefactoringRule_default_description=Please set name and description
RefactoringRule_default_name=Missing
RefactoringSummaryWizardPage_description=All changes made by all rules
RefactoringSummaryWizardPage_Duration=DURATION ({0}): {1}
RefactoringSummaryWizardPage_eliminated_technical_debt=Eliminated technical debt: [{0}] Minutes
RefactoringSummaryWizardPage_title=Summary
RefactoringSummaryWizardPage_warn_disableFinishWhenFree=Finishing this wizard and applying changes to your source code requires a full license.
RefactoringInvoker_ConfigContainsInvalidSyntax=Standalone configuration contains invalid syntax
RefactoringInvoker_configurationLoaded=Configuration loaded
RefactoringInvoker_error_allModulesExcluded=No refactoring can be done, all modules are excluded.
RefactoringInvoker_GetEnabledRulesForProject=Getting enabled rules for project
RefactoringInvoker_GetSelectedRules=Getting selected rules
RefactoringInvoker_importingMavenProjects=Importing Maven projects into workspace...
RefactoringInvoker_loadingConfiguration=Loading configuration for imported projects...
RefactoringInvoker_loadingConfigurationForProject=Loading configuration for project [{0}]...
RefactoringInvoker_mavenProjectsImported=Maven projects imported into workspace
RefactoringInvoker_OverridingConfigWithCommandLine=Overriding license key from configuration file with command line parameter
RefactoringInvoker_projectExcludedFromRefactoring=Project [{0}] has been excluded from refactoring
RefactoringInvoker_usingConfiguration=Using configuration at [{0}]
RefactoringInvoker_usingDefaultConfiguration=Using default configuration
RefactoringInvoker_usingOverriddenConfiguration=Using overridden configuration at [{0}]
SelectRulesWizard_end_refactoring=End refactoring from [{0}] in project [{1}]
SelectRulesWizard_rules_with_changes=Rules with changes for project [{0}] are: [{1}]
SelectRulesWizard_start_refactoring=Start refactoring from [{0}] in project [{1}]
SelectRulesWizard_Summary=Summary
SelectRulesWizard_title=Select Rules
SelectRulesWizard_warning_no_refactorings=No possible refactorings were found!
SelectRulesWizardHandler_allready_running=jSparrow is already running
SelectRulesWizardHandler_finishButtonText=Proceed
SelectRulesWizardHandler_getting_selected_resources_failed=Error getting selected resources: 
SelectRulesWizardHandler_multipleProjectsWarning=Please make sure you are starting jSparrow on resources from only one project.
SelectRulesWizardHandler_noFileWithoutError=Selection did not contain any Java files without compilation errors.
SelectRulesWizardHandler_selectionNotPossible_ubuntuBug=The selection could not be determined. This is possibly an Eclipse Oxygen bug which only occurs in Ubuntu.
SelectRulesWizardHandler_user_getting_selected_resources_failed=Error getting selected resources. Please Check your workspace and try again.
SelectRulesWizardPage_addAllButtonLabel=Add all
SelectRulesWizardPage_addButtonLabel=Add
SelectRulesWizardPage_CustomProfileLabel=Custom
SelectRulesWizardPage_defaultDescriptionText=Select a rule to show the description
SelectRulesWizardPage_description=List of Rules
SelectRulesWizardPage_EmptyProfileLabel=None
SelectRulesWizardPage_emptyString=
SelectRulesWizardPage_filterByName=Filter by name
SelectRulesWizardPage_page_name=Select Rules
SelectRulesWizardPage_profileDoesNotExist=The profile {0} does not exist. Defaulting to the "None" profile.
SelectRulesWizardPage_removeAllButtonLabel=Remove all
SelectRulesWizardPage_removeButtonLabel=Remove
SelectRulesWizardPage_removeDisabledRulesButtonText=Remove disabled rules
SelectRulesWizardPage_rule_description_default_text=Select a rule on the left side to get more information!
SelectRulesWizardPage_searchString=Search
SelectRulesWizardPage_select_unselect_all=Select / unselect all
SelectRulesWizardPage_selectProfile=Select profile
SelectRulesWizardPage_title=Select Rules
SimonykeesMessageDialog_bugreport_email=<a href="mailto://support@jsparrow.eu">support@jsparrow.eu</a>
SimonykeesMessageDialog_default_error_message=An unexpected Error has occurred\!\nPlease contact Support\!
SimonykeesMessageDialog_open_browser_error_message=Error occurred while opening the link in the browser.
SimonykeesPreferenceManager_builtIn=built-in
SimonykeesPreferencePage_ChooseConfigFileDialogTitle=Choose jSparrow Configuration File
SimonykeesPreferencePage_DefaultProfileNotReplacable=The profile "{0}" is built-in and cannot be replaced. Please choose a different profile name. 
SimonykeesPreferencePage_editProfileButtonLabel=Edit Profile...
SimonykeesPreferencePage_enableIntroText=Enable introduction page on startup
SimonykeesPreferencePage_ExportProfilesButton=Export Profile(s)...
SimonykeesPreferencePage_FileAlreadyExists=The selected file already exists!\nDo you want to replace it?
SimonykeesPreferencePage_generalSettingsGroupTitle=General Settings
SimonykeesPreferencePage_ImportProfilesButton=Import Profile(s)...
SimonykeesPreferencePage_KeepBoth=Keep Both
SimonykeesPreferencePage_newProfileButtonLabel=New Profile...
SimonykeesPreferencePage_NoProfilesImported=No profiles have been imported\!
SimonykeesPreferencePage_NoProfilesSelected=Please select profiles to export!
SimonykeesPreferencePage_ProfileExistsReplace=A profile named "{0}" already exists!\nDo you want to replace it?
SimonykeesPreferencePage_ProfileExportSuccessfulTo=The selected profiles have been successfully exported to:\n{0}
SimonykeesPreferencePage_ProfileImportSuccessful={0} profile(s) have been imported successfully\!\nPlease click "Apply" to persist the changes!
SimonykeesPreferencePage_profileAndName=Profile: {0}
SimonykeesPreferencePage_profilesBuiltInSuffix=\ [built-in]
SimonykeesPreferencePage_profileSettingsGroupTitle=Profile Settings
SimonykeesPreferencePage_removeProfileButtonLabel=Remove Profile(s)
SimonykeesPreferencePage_Replace=Replace
SimonykeesPreferencePage_reservedProfileNameError=The profile name "{0}" is reserved. Please choose a different name.
SimonykeesPreferencePage_resolvePackagesRecursivelyLabel=Resolve Packages Recursively
SimonykeesPreferencePage_rules=Rules
SimonykeesPreferencePage_SelectedFileDoesNotExist=The selected file does not exist\!
SimonykeesPreferencePage_SelectedPathIsDirectory=The selected path leads to a directory. Please choose a file\!
SimonykeesPreferencePage_Skip=Skip
SimonykeesPreferencePage_selectProfile=Select profile
SimonykeesPreferencePage_UseAsDefaultProfileButtonLabel=Use As Default Profile
SimonykeesPreferencePage_useProfileOptionNoProfile=No profile
SimonykeesPreferencePage_useProfileOptionRadioGroupTitle=Select rules profile
SimonykeesPreferencePage_useProfileOptionSelectedProfile=Selected profile
SimonykeesPreferencePageLicense_jsparrow_free=jSparrow Free.
SimonykeesPreferencePageLicense_jsparrow_pro_valid_until=jSparrow Pro (%s). Valid until %s.
SimonykeesPreferencePageLicense_jsparrow_starter=jSparrow Starter.
SimonykeesPreferencePageLicense_to_obtain_new_license_visit_jsparrow=To get a jSparrow license, visit us on <a href="https://jsparrow.eu/get-jsparrow/">https://jsparrow.eu</a>.
SimonykeesPreferencePageLicense_update_license_key_button=Update license key
SimonykeesUpdateLicenseDialog_invalid_license_key=Invalid license key. Please get a new license key.
SimonykeesUpdateLicenseDialog_license_updated_successfully=License updated successfully\!
SimonykeesUpdateLicenseDialog_update_license_dialog_group_title=Enter a jSparrow license key
SimonykeesUpdateLicenseDialog_update_license_dialog_label=New license key
SimonykeesUpdateLicenseDialog_update_license_dialog_message=Please enter your new license key below.
SimonykeesUpdateLicenseDialog_update_license_dialog_title=Update license key.
SimonykeesUpdateLicenseDialog_update_llicense_dialog_button=Update
StartDialog_alwaysShowIntroText=Always show welcome at start up
StartDialog_appreciationLabel=We greatly appreciate your suggestions, critique and general feedback in order to further enhance jSparrow\! 
StartDialog_buyLicenseLabel=Want to buy a license?
StartDialog_changesLabel=Changes will only be applied, once you have approved them\!
StartDialog_customizeLabel=For additional customization options, as well as the license status have a look at Window -> Preferences -> jSparrow.
StartDialog_feedbackLabel=Feedback and suggestions:
StartDialog_goodToKnowLabel=Good to know:
StartDialog_licenseLinkLabel=Using the free version you can review changes proposed by jSparrow but not apply them. Buy a license <a href="https://order.shareit.com/cart/new?vendorid=200267175&PRODUCT%5B300770603%5D=1">here</a>.
StartDialog_likeItLabel=How do you like it?
StartDialog_marketplaceLinkLabel=Favourite us on the <a href="https://marketplace.eclipse.org/content/jsparrow-automatical-java-code-improvement">Eclipse Marketplace</a>.
StartDialog_quickStartClickLabel=2. Right click them and select one of the options bellow:
StartDialog_quickStartGoToLabel=1. Choose the desired resources from one of the following views:
StartDialog_quickStartLabel=Quick start in just 2 steps:
StartDialog_rateUsLabel=Rate us: 
StartDialog_thankyouLabel=Thank you for choosing our tool for automatical code improvement\! 
StartDialog_titleLabel=jSparrow - Automatical Java Code Improvement
StartDialog_wantMoreLabel=Want more information?
StartDialog_welcomeLabel=Welcome
ui_cancel=Cancel
ui_ok=OK
ValidateExecutor_shutting_down_validation_scheduler=Shutting down validation scheduler
ValidateExecutor_validation_scheduler_started=Validation scheduler started

# Rules (ONLY ADD RULES HERE!)
ArithmethicAssignmentRule_description=Assignments involving an arithmetic assignment can be simplified by using a compound operator such as '+=', '-=', '/=' or '*='.\n\nFor example, this rule will transform 'a=a+1' into 'a+=1'.\n\nThe rule only applies if both operands are primitive types.
ArithmethicAssignmentRule_name=Replace Assignment with Compound Operator
AvoidConcatenationInLoggingStatementsRule_description=Avoid always evaluating concatenated logging messages by introducing parameters, which only evaluate when the logging level is active.
AvoidConcatenationInLoggingStatementsRule_name=Avoid Concatenation in Logging Statements
BracketsToControlRule_description=Transforms single statements after control statements to block constructs by adding curly braces. This improves readability. 
BracketsToControlRule_name=Add Braces to Control Statements
CodeFormatterRule_description=Reformats code according to the coding conventions defined in Eclipse. For example, line breaks will be added if lines are too long. Properly formatted code improves readability and makes collaboration easier.
CodeFormatterRule_name=Reformat Code
CollapseIfStatementsRule_description=Collapses nested if-statements into a single one when possible. Introduces a boolean variable to store the condition if it consists of a conjunction of more than two expressions.
CollapseIfStatementsRule_name=Collapse If Statements
CollectionRemoveAllRule_description=Simplifies the code by replacing all occurrences of removeAll() which have the current collection as parameter with clear(). For example, list.removeAll(list) becomes list.clear(). 
CollectionRemoveAllRule_name=Replace removeAll() with clear()
CollectionsFactoryMethodsRule_description=Replace Collections.unmodifiableList/Set/Map with factory methods for collections introduced in Java 9, respectively List.of, Set.of and Map.ofEntries
CollectionsFactoryMethodsRule_name=Use Factory Methods for Collections
CreateTempFilesUsingJavaNioRule_description=According to the documentation of 'File.createTempFile(String, String)', a suitable alternative for creating temporary files in security-sensitive applications is to use 'java.nio.file.Files.createTempFile(String, String, FileAttribute<?>...)'. The reason behind it is that files created by the latter have more restrictive access permissions.\n\nThis rule replaces the temporary file creation using 'java.io.File' by the alternative methods defined in 'java.nio.file.Files'.
CreateTempFilesUsingJavaNioRule_name=Create Temp Files Using Java NIO
CustomTextEditChangePreviewViewer_originalCode=Original code
CustomTextEditChangePreviewViewer_refactoredCode=Refactored code
DiamondOperatorRule_description=Since Java 1.7 the Diamond Operator (<>) can be used to simplify instance creations where generics are involved.\n\nFor example, 'Map<String, List<String>> myMap = new HashMap<String, List<String>>()' can be replaced by 'Map<String, List<String>> myMap = new HashMap<>()'.\n\n In order to apply this rule, your project must use Java 1.7 or later.
DiamondOperatorRule_name=Remove Explicit Type Argument
DurationFormatUtil_Days=Days
DurationFormatUtil_Hours=Hours
DurationFormatUtil_Minutes=Minutes
DurationFormatUtil_RunDuration=Run Duration: %s
DurationFormatUtil_Seconds=Seconds
DurationFormatUtil_TimeSaved=Time Saved: %s
EmptyProfile_profileName=None
EnhancedForLoopToStreamAnyMatchRule_description=Replaces occurrences of enhanced for-loops which are only used to initialize or return a boolean variable with Stream::anyMatch, Stream::allMatch or Stream::noneMatch. The stream syntax is more concise and improves readability.
EnhancedForLoopToStreamAnyMatchRule_name=Replace For-Loop with Stream::Match
EnhancedForLoopToStreamFindFirstRule_description=Enhanced for-loops which are used to find an element within a collection can be replaced by Stream::findFirst. Using the stream syntax a multi-line control statement can be reduced to a single line. 
EnhancedForLoopToStreamFindFirstRule_name=Replace For-Loop with Stream::findFirst
EnhancedForLoopToStreamForEachRule_description=Enhanced For-Loops can be replaced by forEach().\n\nFor example 'for(Item item: items) { }' becomes 'items.forEach()'.\n\nThis makes code more readable and can be combined with other stream functions such as filter and map.
EnhancedForLoopToStreamForEachRule_name=Replace For-Loop with Stream::forEach
EnhancedForLoopToStreamSumRule_description=Transforms enhanced for-loops which are only used for summing up the elements of a collection to a Stream::sum invocation.
EnhancedForLoopToStreamSumRule_name=Replace For-Loop with Stream::sum
EnhancedForLoopToStreamTakeWhileRule_description=Replaces Enhanced for-loops iterating over the prefix of a collection with Stream::takeWhile introduced in Java 9.
EnhancedForLoopToStreamTakeWhileRule_name=Replace For-Loop with Stream::takeWhile
EnumsWithoutEqualsResolver_message=Replace occurrences of equals() on Enum constants with an identity comparison (==).
EnumsWithoutEqualsResolver_name=Replace equals() on Enum constants
EnumsWithoutEqualsRule_name=Replace equals() on Enum Constants
EnumsWithoutEqualsRule_description=Replace occurrences of equals() on Enum constants with an identity comparison (==). In case the equals relation is wrapped with an boolean negation the result will be an not equals (!=).
FieldNameConventionRule_description=Renames all private non-final fields within a class to comply with Java naming conventions. Characters such as underscores or dollar signs used in other languages should be avoided to improve readability.
FieldNameConventionRule_name=Apply Field Naming Conventions
FlatMapInsteadOfNestedLoopsRule_description=Compound data structures similar to 'Collection<Collection<T>>' are fairly common. This rule finds the nested invocations of 'Stream::forEach' which are used to iterate over such data structures and replaces them with single invocations of  'Stream::flatMap'. Using 'flatMap()' not only makes the code more readable but also allows for additional combinations with other Stream operations.
FlatMapInsteadOfNestedLoopsRule_name=Replace Nested Loops with flatMap
ForToForEachRule_description=Since Java 1.5 enhanced for-loops can be used to iterate over collections. This rule replaces old for-loops utilizing iterators with enhanced for-loops in order to improve readability.
ForToForEachRule_name=Replace For-Loop with Enhanced-For-Loop
FunctionalInterfaceResolver_message=Anonymous class can be replaced by lambda expression
FunctionalInterfaceResolver_name=Replace with Lambda Expression
FunctionalInterfaceRule_description=Anonymous instances of a functional interface type are replaced by a simple lambda expression. Only instances of functional interfaces can be replaced.  
FunctionalInterfaceRule_name=Use Functional Interfaces
GuardConditionRule_description=If the last statement on a method is an if-statement consisting of two or more statements, then a guard-if can be used instead and the body of the existing if-statement can be unwrapped.
GuardConditionRule_name=Use Guard Condition
IndexOfToContainsRule_description=This rule replaces calls to indexOf() on instances of String or Collection with calls to the contains() method.\n\nFor example 'l.indexOf(s) >= 0' is transformed to 'l.contains(s)'.\n\n'contains()' was introduced in Java 1.4 and helps to make the code more readable. 
IndexOfToContainsRule_name=Replace indexOf() with contains()
InefficientConstructorResolver_message=The factory method valueOf() is generally a better choice as it is likely to yield significantly better space and time performance.
InefficientConstructorResolver_name=Replace inefficient constructors with valueOf()
InefficientConstructorRule_description=All calls to a constructor of a primitive type will be replaced by the corresponding static valueOf() method.\n\nFor example 'new Integer("1")' becomes 'Integer.valueOf("1")'. 
InefficientConstructorRule_name=Replace Inefficient Constructors with valueOf()
InsertBreakStatementInLoopsRule_description=Finds the Enhanced For-loops whose sole purpose is to compute a boolean value without causing side effects and inserts a break statement immediately after the boolean value is computed. Thus, eliminating redundant loop iterations.
InsertBreakStatementInLoopsRule_name=Insert Break Statements in For-loops
LambdaForEachCollectRule_description=Replaces 'Stream.forEach' with 'Stream.collect' if the argument of the forEach statement is only used for adding elements to a list.\n\nFor example, 'stream.forEach(x -> list.add)' is transformed into 'stream.collect(Collectors.toList())'.\n\nThis simplifies adding elements to a list.
LambdaForEachCollectRule_name=Use Stream::collect
LambdaForEachIfWrapperToFilterRule_description=If-Statements making up the entire execution block of a Stream::forEach method can be transformed into a call to Stream::filter. This only applies if there are no other statements passed as arguments to forEach(). filter() can be used with other stream functions and improves readability. 
LambdaForEachIfWrapperToFilterRule_name=Use Stream::filter
LambdaForEachMapRule_description=Extracts a block from the body of the consumer of the Stream::forEach method and introduces Stream::map instead. This makes complicated code blocks easier to read and reuse. 
LambdaForEachMapRule_name=Use Stream::map
LambdaToMethodReferenceResolver_message=Simplify the lambda expression by using a method reference.
LambdaToMethodReferenceResolver_name=Replace lambda expression with method reference
LambdaToMethodReferenceRule_description=This rule simplifies expression lambdas by using method reference.\n\nFor example, 'personList.forEach(person -> doSomething(person))' becomes 'personList.forEach(this::doSomething)'.\n\nThis rule can only be applied if the parameters of the lambda expression and the method match. 
LambdaToMethodReferenceRule_name=Replace Expression Lambda with Method Reference
MakeFiledsAndVariablesFinalRule_description=This rule declares local variables and private fields final if they meet the following criteria:\n\t1.) Static fields have to be initialised either at the declaration or in a static initialiser\n\t2.) Non-static fields have to be initialised at the declaration, in a class initialiser or in all constructors of a class\n\t3.) The field or variable is not assigned after its initialisation
MakeFiledsAndVariablesFinalRule_name=Make Fields And Variables Final
MapGetOrDefaultRule_description=Java 8 adds an API that allows for getting a default value if the map contains no mapping for the key. \nFor example: \n\t Object value = map.get(key); \n\t if(value == null) { \n\t\t value = default;\n\t } \n\nis replaced with: \n\t Object value = map.getOrDefault(key, default); \n\nNote: the rule applies only on map implementations that do not allow null values. 
MapGetOrDefaultRule_name=Replace Map::get by Map::getOrDefault
MavenProjectImporter_collectingProjectInfo=Collecting information for found Maven projects...
MavenProjectImporter_createingJavaProjects=Creating Java projects...
MavenProjectImporter_creatingSingleJavaProject=Creating Java project [{0}]...
MavenProjectImporter_importingMavenProject=Importing Maven projects...
MavenProjectImporter_searchingMavenProjects=Searching maven projects in given directories...
MavenProjectImporter_skippingJavaProjectCreation=Skipping project [{0}] without Java nature...
MavenProjectImporter_startImport=Starting Maven projects import from [{0}] into workspace [{1}]
MessageDialog_licensingError_failedToLoad=License storage problem: {0} Falling back to free license.
MessageDialog_licensingError_failedToValidate=Failed to validate license: {0}\nPlease view the jSparrow logs for more information.
ReplaceJUnit3TestCasesRule_description=This rule migrates JUnit 3 tests to either JUnit JUpiter or JUnit 4 depending on the most up-to-date JUnit version available in the classpath.
ReplaceJUnit3TestCasesRule_name=Replace JUnit 3 Test Cases
ReplaceJUnit4AnnotationsWithJupiterRule_description=This rule replaces JUnit 4 annotations @Test, @Ignore, @Before, @BeforeClass, @After, and @AfterClass with their corresponding Jupiter alternatives: @Test, @Disable, @BeforeEach, @BeforeAll, @AfterEach, and @AfterAll. \nBy replacing each of these JUnit 4 annotations by the corresponding Jupiter alternatives, this rule promotes a stepwise transition to JUnit Jupiter.
ReplaceJUnit4AnnotationsWithJupiterRule_name=Replace JUnit 4 Annotations with JUnit Jupiter
ReplaceJUnit4AssertWithJupiterRule_description=This rule contributes to a stepwise transition from JUnit 4 to JUnit 5 by replacing the assertion methods defined in JUnit 4 by the equivalent assertion methods defined in JUnit 5.
ReplaceJUnit4AssertWithJupiterRule_name=Replace JUnit 4 Assertions with JUnit Jupiter
ReplaceJUnit4AssumptionsWithHamcrestJUnitRule_description=This rule replaces the JUnit 4 assumptions 'assumeThat', 'asssumeNoException', and 'assumeNotNull' by the equivalent Hamcrest JUnit assumption 'MatcherAssume.assumeThat'.
ReplaceJUnit4AssumptionsWithHamcrestJUnitRule_name=Replace JUnit 4 Assumptions with Hamcrest JUnit
ReplaceJUnit4AssumptionsWithJupiterRule_description=This rule contributes to a stepwise transition from JUnit 4 to JUnit 5 by replacing the assumption methods defined in JUnit 4 by the equivalent assumption methods defined in JUnit 5.
ReplaceJUnit4AssumptionsWithJupiterRule_name=Replace JUnit 4 Assumptions with JUnit Jupiter
ReplaceJUnit4CategoryWithJupiterTagRule_description=This rule replaces JUnit 4 Category annotations with one or more Jupiter Tag annotations. These replacements are a further step towards a transition from JUnit 4 to JUnit Jupiter.
ReplaceJUnit4CategoryWithJupiterTagRule_name=Replace JUnit4 Category with JUnit Jupiter Tag
ReplaceJUnitAssertThatWithHamcrestRule_description=The JUnit Assert.assertThat method is deprecated. Its sole purpose is to forward the call to the MatcherAssert.assertThat method defined in Hamcrest 1.3. Therefore, it is recommended to directly use the equivalent assertion defined in the third party Hamcrest library.
ReplaceJUnitAssertThatWithHamcrestRule_name=Replace JUnit assertThat with Hamcrest
MultiCatchRule_description=Java 7 introduced the possibility to merge multiple catch clauses into a single multi-catch clause. Merging is only possible if the catch statements are identical. Using this rule reduces clutter and improves readability.
MultiCatchRule_name=Use Multi-Catch
MultiVariableDeclarationLineRule_description=Coding conventions for Java recommend that each variable or field is declared on a separate line. This rule will split declarations occurring on the same lines over multiple lines to improve readability.
MultiVariableDeclarationLineRule_name=Split Multiple Variable Declarations
Netlicensing_persistenceError_failedtoLoad=Failed to load license from storage.
Netlicensing_persistenceError_failedToSave=Failed to save license in storage.
Netlicensing_validationResult_freeLicenseExpired0=Register for free to get jSparrow Starter.
OptionalFilterRule_description=Extracts an Optional::filter from the consumer used in Optional::ifPresent. Hence, simplifying the lambda expressions used with Optional operations. This transformation is feasible when the entire consumer's body is wrapped into an if-statement.
OptionalFilterRule_name=Use Optional::filter
OptionalIfPresentOrElseRule_description=It is common to have an else-statement following an Optional.isPresent check. One of the extensions of the Optional API in Java 9 is Optional.ifPresentOrElse, which performs either a Consumer or a Runnable depending on the presence of the value. This rule replaces an 'isPresent' check followed by an else-statement with a single 'ifPresentOrElse' invocation.
OptionalIfPresentOrElseRule_name=Use Optional::ifPresentOrElse
OptionalIfPresentRule_description=The usage of  Optional.get should be avoided in general because it can potentially throw a NoSuchElementException (it is likely to be deprecated in future releases).  It is often the case that the invocation of Optional.get is wrapped by a condition that uses  Optional.isPresent. Such cases can be replaced with the Optional.ifPresent(Consumer<? super T> consumer).
OptionalIfPresentRule_name=Use Optional::ifPresent
OptionalMapRule_description=Extracts an Optional::map from the consumer used in Optional::ifPresent. This makes complicated code blocks easier to read and reuse.
OptionalMapRule_name=Use Optional::map
OrganiseImportsRule_description=Applying this rule has the same effect as Eclipse's built in Organize Imports functionality. It will remove unused imports and sort import statements alphabetically. 
OrganiseImportsRule_name=Organize Imports
OverrideAnnotationRule_description=This rule adds the @Override annotation to methods overriding or implementing another method declared in a parent class. Even though using @Override it is not mandatory, using this annotation is considered a best practice for two main reasons: \n 1) It ensures that the method signature is a subsignature of the overridden method (otherwise, a compile error is indicated). \n 2) It improves the readability. 
OverrideAnnotationRule_name=Use @Override Annotation
PrimitiveBoxedForStringResolver_message=Avoid constructing boxed primitives by using the factory method toString
PrimitiveBoxedForStringResolver_name=Remove boxing for String conversions
PrimitiveBoxedForStringRule_description=When calling toString() on a primitive no new instance of that primitive has to be created. This rule replaces occurrences of such code with a static method. For example, 'new Integer(1).toString()' becomes 'Integer.toString(1)'. Applying this rule improves performance. 
PrimitiveBoxedForStringRule_name=Remove Boxing for String Conversions
PrimitiveObjectUseEqualsRule_description=It is recommended that you use equals() on primitive objects. Applying this rule will replace occurrences of \!= and == with equals().\n\nFor example, '"hello" == "world"' will become '"hello".equals("world")'\n\nUsing this rule helps to avoid bugs, as == checks for object reference equality instead of value equality.
PrimitiveObjectUseEqualsRule_name=Use equals() on Primitive Objects
PutIfAbsentResolver_message=Use the Java 8 API that allows for conditionally adding entries to a map.
PutIfAbsentResolver_name=Replace put(..) with putIfAbsent(..)
PutIfAbsentRule_description=Java 8 adds an API that allows for conditionally adding entries to a map. Before, one would have to resort to if-statements.\n\nFor example, 'if(!map.containsKey(aKey)) { map.put(aKey, aValue); }' becomes 'map.putIfAbsent(aKey,aValue)'.\n\nUsing this rule reduces clutter and improves readability
PutIfAbsentRule_name=Replace put(..) with putIfAbsent(..)
RearrangeClassMembersRule_description=According to Oracle coding conventions, the members of classes and interfaces should appear in the following order:\n 1) Class variables \n 2) Instance variables \n 3) Constructors \n 4) Methods. \n\nAdditionally, those members should be sorted based on their access modifiers. Applying this rule will sort class members to promote readability.
RearrangeClassMembersRule_name=Rearrange Class Members
RegistrationControl_cancelButton=Cancel
RegistrationControl_checkEmailForLicenseText=Please check your email to activate jSparrow Starter.
RegistrationControl_checkInternetText=Please check your internet connection and try again later.
RegistrationControl_companyLabel=Company
RegistrationControl_emailLabel=Email
RegistrationControl_firstNameLabel=First name
RegistrationControl_gpdrAgreeText=By clicking on the checkbox you confirm that you have read and understood the <a href="https://jsparrow.eu/gdpr/">Data Protection Declaration</a> and that you agree to all points listed therein.
RegistrationControl_introText=Register and get 15 FREE rules.
RegistrationControl_lastNameLabel=Last name
RegistrationControl_licenseAgreeText=I agree with the terms and conditions of <a href="https://jsparrow.eu/eula/">the License Agreement</a>.
RegistrationControl_newsletterAgreeText=I agree to receive the jSparrow newsletter about new product features, special offers and interesting information about Java refactoring and improving code quality.
RegistrationControl_registerButton=Register
RegistrationControl_registrationFailedTitle=jSparrow registration failed
RegistrationControl_registrationSuccessfulText=Registration successful\!
RegistrationControl_registrationSuccessfulTitle=jSparrow registration successful
RegistrationControl_serverUnreachableText=Server cannot be reached.
RegistrationControl_statusText=Contacting server . . . 
RegistrationControl_termsGroupTitle=Terms and Conditions
RegistrationDialog_activateTabTitle=Activate
RegistrationDialog_activateTabTooltip=Activate License
RegistrationDialog_registerTabTitle=Register
RegistrationDialog_registerTabTooltip=Register Email
RegistrationDialog_registrationTitle=jSparrow Starter Registration
RegistrationFormCheckBox_invalidDataText=This field is mandatory
RegistrationFormField_invalidDataText=Please enter valid data, this field is mandatory
RegistrationFormField_validDataText=Valid 
ReImplementingInterfaceRule_description=Remove interfaces from class declaration which are already implemented by a super class. These interfaces are inherited from the super class.
ReImplementingInterfaceRule_name=Remove Inherited Interfaces from Class Declaration
RemoveCollectionAddAllRule_description=In order to apply the rule, the following two statements must occur:\nA declaration of a local variable storing an instance of java.util.Collection which is initialized with an empty constructor call and which is immediately followed by an invocation of the \u201CaddAll\u201D - Method on the same variable.
RemoveCollectionAddAllRule_name=Remove Collection::addAll
RemoveDoubleNegationRule_description=Removes pairs of negations from boolean expressions until only zero or one negation is left.
RemoveDoubleNegationRule_name=Remove Double Negations
RemoveDuplicatedThrowsRule_description=Removes the following thrown exceptions from the method signature: \n\t 1) Exceptions which are subtype of already thrown exceptions. \n\t 2) Exceptions that are thrown more than once. \n\t 3) Runtime exceptions. 
RemoveDuplicatedThrowsRule_name=Remove Unnecessary Thrown Exceptions on Method Signatures
RemoveEmptyStatementRule_description=Finds the unnecessary semicolons in code blocks and removes them.
RemoveEmptyStatementRule_name=Remove Unnecessary Semicolons
RemoveExplicitCallToSuperRule_description=Removes unnecessary explicit call to the default constructor of the super class.
RemoveExplicitCallToSuperRule_name=Remove Explicit Call To super()
RemoveModifiersInInterfacePropertiesRule_description=Removes the 'public' modifiers from method declarations and 'public static final' modifiers from field declarations in interfaces.
RemoveModifiersInInterfacePropertiesRule_name=Remove Modifiers from Interface Properties
RemoveNewStringConstructorRule_description=Removes all class instantiations of String if the constructor parameter is empty or a String itself.\n\nFor example 'new String("StringLiteral")' becomes '"StringLiteral"'. This improves performance and readability.
RemoveNewStringConstructorRule_name=Use String Literals
RemoveNullCheckBeforeInstanceofResolver_message=null is not an instance of anything, therefore the null-check is redundant.
RemoveNullCheckBeforeInstanceofResolver_name=Remove Null-Checks Before Instanceof
RemoveNullCheckBeforeInstanceofRule_description=Finds and removes null-checks before occurrences of instanceof. Since null is not an instance of anything, the null-check is redundant.
RemoveNullCheckBeforeInstanceofRule_name=Remove Null-Checks Before Instanceof
RemoveRedundantTypeCastRule_description=This rule removes unnecessary type cast operations. If the expression is casted to a type which already is exactly the type of the expression, then the type casting prefix is removed. \nAdditionally, also parentheses will be removed if they are not necessary any more.
RemoveRedundantTypeCastRule_name=Remove Redundant Type Casts
RemoveToStringOnStringRule_description=All method invocations of toString() on a String element are not needed. Applying this rule will remove such method calls.\n\nFor example, '"string".toString()' becomes '"string"'.\n\nThis transformation improves performance.
RemoveToStringOnStringRule_name=Remove toString() on String
RemoveUnusedParameterRule_description=Finds and removes unused parameters in private method declarations. Updates the affected method invocations accordingly.
RemoveUnusedParameterRule_name=Remove Unused Parameters in Private Methods
RenameFieldsRuleWizard_taskName_collectingUnits=Collect compilation units
RenameFieldsRuleWizardHandler_multipleProjectsSelected=Multiple Projects Selected\!
RenameFieldsRuleWizardHandler_performFinish_jobName=Perform finish
RenameFieldsRuleWizardHandler_renamingRuleOnOneProjectOnly=The Renaming Fields Rule can only be executed on one project at a time.
RenameFieldsRuleWizardPage_description=Configure rename fields rule
RenameFieldsRuleWizardPage_dollarSignReplacementLabelText=How should the first character after a $ (dollar) sign be handled?
RenameFieldsRuleWizardPage_fieldTypeLabelText=Apply on the following fields
RenameFieldsRuleWizardPage_replacemenentsLabelText=Configure replacements
RenameFieldsRuleWizardPage_searchScopeLabelText=Search scope for references
RenameFieldsRuleWizardPage_title=Rename fields rule
RenameFieldsRuleWizardPage_todoCommentsLabelText=Should TODO comments be added if renaming cannot be done?
RenameFieldsRuleWizardPage_underscoreReplacementLabelText=How should the first character after an underscore be handled?
RenameFieldsRuleWizardPage_warning_noFieldSelected=At least one field type has to be checked
RenameFieldsRuleWizardPageModel_addTodoCommentsText=Add TODO comments
RenameFieldsRuleWizardPageModel_dollarSignReplacementOption_leaveAsIs=Leave case as is (example "variable$name" to "variablename")
RenameFieldsRuleWizardPageModel_dollarSignReplacementOption_upperCase=Upper case (example "variable$name" to "variableName")
RenameFieldsRuleWizardPageModel_scopeOption_project=Project (References will be searched for in the enclosing project.)
RenameFieldsRuleWizardPageModel_scopeOption_workspace=Workspace (Search for references in the whole workspace. This is slower.)
RenameFieldsRuleWizardPageModel_typeOption_packagePrivateFields=package-private fields
RenameFieldsRuleWizardPageModel_typeOption_privateFields=private fields
RenameFieldsRuleWizardPageModel_typeOption_protectedFields=protected fields
RenameFieldsRuleWizardPageModel_typeOption_publicFields=public fields
RenameFieldsRuleWizardPageModel_underscoreReplacementOption_leaveAsIs=Leave case as is (example "variable_name" to "variablename")
RenameFieldsRuleWizardPageModel_underscoreReplacementOption_upperCase=Upper case (example "variable_name" to "variableName")
RenamingRulePreviewWizardPage_RenameFields=Rename {0} Fields
RenamingRuleSummaryWizardPage_times=Times
RenamingRuleSummaryWizardPage_timesToolTipText=Number of findings
RenamingSummaryWizardPageModel_externalReferencesDescription=Rename {0} Fields (affected external references)
ReorderModifiersRule_description=Reorders modifiers of Class, Field and Method declarations according to Java coding conventions.
ReorderModifiersRule_name=Reorder Modifiers
ReplaceDynamicQueryByPreparedStatementRule_description=Replaces java.sql.Statement with java.sql.PreparedStatement (aka parameterized queries) if the SQL query is constructed by concatenating string literals with user defined expressions (e.g. variables, method invocations, user input, etc). Parameterized queries enforce a distinction between the SQL code and the data passed through parameters, thus reducing the SQL injection vulnerabilities.
ReplaceDynamicQueryByPreparedStatementRule_name=Use Parameterized Query
ReplaceExpectedAnnotationPropertyRule_description=Using the 'expected' annotation property for testing the thrown exceptions is rather misleading. Often it becomes unclear which part of the test code is responsible for throwing the exception. This rule aims to overcome this problem by replacing the 'expected' annotation property with 'assertThrows()' introduced in JUnit 4.13.
ReplaceExpectedAnnotationPropertyRule_name=Replace JUnit Expected Annotation Property with assertThrows
ReplaceExpectedExceptionRule_description=The 'ExpectedException.none()' rule is deprecated since JUnit 4.13. The recommended alternative is to use 'assertThrows()'. This makes JUnit tests easier to understand and prevents scenarios where some parts of the test code are unreachable. \nThe goal of this rule is to replace 'expectedException.expect()' with 'assertThrows()'. Additionally, new assertions are added for each invocation of 'expectMessage()' and 'expectCause()'.
ReplaceExpectedExceptionRule_name=Replace JUnit ExpectedException with assertThrows
ReplaceJUnitTimeoutAnnotationPropertyRule_description=JUnit Jupiter API provides timeout assertions, i.e., assertions that execution of some code completes before a timeout exceeds. In JUnit 4 this is achieved by using the 'timeout' property of '@Test(timeout=...)' annotation. \nThis rule removes the 'timeout' annotation property and inserts an  'assertTimeout' instead.
ReplaceJUnitTimeoutAnnotationPropertyRule_name=Replace JUnit Timeout Annotation Property with assertTimeout
ReuseRandomObjectsRule_description=Creating a new Random object each time a random value is needed is inefficient and may produce numbers which are not random. This rule extracts reusable java.util.Random objects, from local variables to class or instance fields.
ReuseRandomObjectsRule_name=Reuse Random Objects
SerialVersionUidRule_description=Applying this rule adds the modifiers static and final to long variables with the name SerialVersionUID, as this confirms to Java coding conventions.\n\nFor example, 'private long serialVersionUID = 1L' becomes 'private static final long serialVersionUID = 1L'.
SerialVersionUidRule_name=Make SerialVersionUID Static Final
StandaloneActivator_noValidLicenseFound=A valid license has not been found\! Please check the license number in '~/.config/jsparrow-standalone/config.yaml' or use the '-Dlicense=<license-number>' maven parameter.
StandaloneConfig_collectCompilationUnits=Collecting compilation units
EclipseProjectFileManager_directoryBackupDone={0} directory backed up for project [{1}]
EclipseProjectFileManager_directoryRestoreDone={0} directory restored for project [{1}]
EclipseProjectFileManager_fileBackupDone={0} file backed up for project [{1}]
EclipseProjectFileManager_fileRestoreDone={0} file restored for project [{1}]
EscapeUserInputsInSQLQueriesRule_description=This rule prevents SQL Injection vulnerabilities: it detects user inputs that are concatenated with Oracle SQL queries and wraps them in 'ESAPI.encoder().encodeForSql(codec, input)'. Thus fragments that could change the intent of an SQL query - like for example `1' or '1'='1` when an ID is required - will no longer be considered as SQL code but will only be considered as values.
EscapeUserInputsInSQLQueriesRule_name=Escape User Inputs in SQL Queries
KeyStoreServiceImpl_keyStoreNotLoadedException=No key store has been loaded. Load a key store for retrieving keys or certificates.
StandaloneConfig_noRefactoringStates=No Java files without compilation errors found for project [{0}]
StandaloneConfig_unusedClassExcludesWarning=The following classes have been defined to be excluded from refactoring but could not be found: {0}
StandaloneConfig_unusedPackageExcludesWarning=The following packages have been defined to be excluded from refactoring but could not be found: {0}
StandaloneLicenseUtil_expirationDate=Expiration date: 
StandaloneLicenseUtil_isValid=Valid: 
StandaloneLicenseUtil_licenseType=License type: 
StandardLoggerRule_description=Replace System.out.print, System.err.print and Throwable.printStackTrace with logger methods.
StandardLoggerRule_name=System Out To Logging
StatementLambdaToExpressionRule_description=If the body of a Lambda statement contains only a single expression braces are optional. It can be reduced to a lambda expression by removing the braces.\n\nFor example 'stream.map(x -> { return x*2 })' is replaced by 'stream.map(x -> return x*2)'.\n\nThis makes the code more readable and more concise.
StatementLambdaToExpressionRule_name=Remove Lambda Expression Braces
StringBufferToBuilderRule_description=This rule changes the type of local variables from StringBuffer() to StringBuilder().
StringBufferToBuilderRule_name=StringBuffer() to StringBuilder()
StringBuildingLoopRule_description=Transforms loops which are only used for concatenating a string to an invocation of Stream::collect(Collectors.joining()). \n If the Java compliance level is below 1.8 and at least 1.5, then a StringBuilder is introduced for concatenating the values on each iteration of the loop.
StringBuildingLoopRule_name=Replace For-Loop with Stream::collect(Collectors.joining())
StringConcatToPlusRule_description=This rule replaces the concat() method on Strings with the '+' operator.\n\nFor example, 's = s.concat("bar")' becomes 's = s + "bar"'. This improves readability and performance for chained concatenations.
StringConcatToPlusRule_name=Replace Concatenation with Infix-Operation
StringFormatLineSeparatorRule_description=This rule replaces any occurrences of '\\n' with '%n'.\n\nFor example 'String.format("\\n\\n")' is replaced by 'String.format("%n%n")'.\n\nThe benefit of this approach is that '%n' is portable across platforms.
StringFormatLineSeparatorRule_name=Use Portable Newline
StringLiteralEqualityCheckResolver_message=To avoid NullPointerExceptions, String literals should be placed on the left side when checking for equality.
StringLiteralEqualityCheckResolver_name=Reorder String equality check
StringLiteralEqualityCheckRule_description=To avoid NullPointerExceptions, String literals should be placed on the left side when checking for equality.\n\nThis means that 'val.equals("val")' is transformed into '"val".equals(val)'.
StringLiteralEqualityCheckRule_name=Reorder String Equality Check
StringUtilsRule_classNotInClassPath=Class not in classpath [{0}]
StringUtilsRule_description=This rule replaces various String methods with their null-safe counterparts from StringUtils.\n\nFor example, '"String".trim()' becomes 'StringUtils.trim("String")'.\n\nUsing this rule makes null pointer exceptions less likely to occur.
StringUtilsRule_name=Use StringUtils Methods
SuggestRegistrationDialog_descriptionOfFreemiumLicense=By registering you can apply 15 rules, marked with "F", to your projects.\n
SuggestRegistrationDialog_dontShowAgainCheckbox=Do not show this message again
SuggestRegistrationDialog_getFreeRulesTitle=Get Free Rules
SuggestRegistrationDialog_noFreemiumLiceseWarning=You are not yet registered for jSparrow Starter\!\n
SuggestRegistrationDialog_registerButtonText=Register
SuggestRegistrationDialog_skipButtonText=Skip
SuggestRegistrationDialog_suggestToRegister=Register for 15 free rules now!
SummaryWizardPage_Files=Files
SummaryWizardPage_Rule=Rule
SummaryWizardPage_Rules=Rules
SummaryWizardPage_RunSummary=Run Summary
SummaryWizardPage_TimesApplied=Times Applied
SummaryWizardPage_TimeSaved=Time Saved
SummaryWizardPageModel_IssuesFixed=Issues Fixed: %d
TryWithResourceRule_description=This rule adds the try-with-resources statement introduced in Java 7. Closing statements are removed as the construct takes care of that. Applying this rule makes the code safer and more readable. 
TryWithResourceRule_name=Use Try-With-Resource
UpdateLicenseDialog_error_couldNotSave=License is valid but could not be persisted.\n{0}\nPlease see the log for details.
UpdateLicenseDialog_error_couldNotValidate=Could not validate license.\n{0}\nPlease see the log for details. 
UpdateLicenseDialog_error_licenseInvalid=License with key \"{0}\" is not valid. License was not saved.
UseArraysStreamRule_description=Replaces Arrays.asList(..).stream() with Arrays.stream(..) when the boxing of stream elements can be avoided. Otherwise, replaces Arrays.asList.stream(..) with the shorthand method Stream.of(..).
UseArraysStreamRule_name=Use Arrays Stream
UseSecureRandomRule_description=The java.util.Random class relies on a pseudo-random number generator. A more secure alternative is java.security.SecureRandom class which relies on a cryptographically strong random number generator (RNG). This rule changes the initializations of java.util.Random objects to use java.security.SecureRandom values.
UseSecureRandomRule_name=Use SecureRandom
UseCollectionsSingletonListRule_description=Replaces Arrays.asList with 0 or 1 parameters respectively with Collections.emptyList() or Collections.singletonList(..). \n\nNote: Arrays.asList creates a fixed size list while Collections.singletonList creates an immutable list and therefore does not allow operations like set(index, element).
UseCollectionsSingletonListRule_name=Use Collections Singleton List
UseComparatorMethodsResolver_message=Lambda expression can be replaced with predefined comparator
UseComparatorMethodsResolver_name=Use predefined comparator
UseComparatorMethodsRule_description=Since Java 8, the Comparator interface provides new factory methods for creating comparators: 'comparingDouble', 'comparingInt', 'comparingLong', 'comparing', 'naturalOrder', 'reverseOrder'. This rule replaces lambda expressions representing comparators by the aforementioned static methods.  
UseComparatorMethodsRule_name=Use Comparator Methods
UseDedicatedAssertionsRule_description=Replaces boolean assertions (e.g., 'assertTrue' and 'assertFalse') with the corresponding dedicated assertions when testing for equality or null values. \nFor example, 'assertTrue(a.equals(b))' can be replaced by 'assertEquals(a, b)'. Similarly, 'assertSame', 'assertNotSame', 'assertNull', or 'assertNotNull' can be used instead of 'assertTrue' or 'assertFalse'.
UseDedicatedAssertionsRule_name=Use Dedicated Assertions
UseFilesBufferedReaderRule_description=Java 7 introduced the 'java.nio.file.Files' class that contains some convenience methods for operating on files. This rule makes use of the 'Files.newBufferedReader' method for initializing 'BufferedReader' objects to read text files in an efficient non-blocking manner.
UseFilesBufferedReaderRule_name=Use Files.newBufferedReader
UseFilesBufferedWriterRule_description=Java 7 introduced the 'java.nio.file.Files' class that contains some convenience methods for operating on files. This rule makes use of the 'Files.newBufferedWriter' method for initializing 'BufferedWriter' objects to write text files in an efficient non-blocking manner.
UseFilesBufferedWriterRule_name=Use Files.newBufferedWriter
UseFilesWriteStringRule_description=Java 11 introduced 'Files.writeString(Path, CharSequence, Charset, OpenOption...)' and 'Files.writeString(Path, CharSequence, OpenOption...)' for writing text into a file by one single invocation and in an efficient non-blocking manner. \nThis rule replaces 'BufferedWriters' that are used to write a single value into a file, with 'Files.write(...)'.
UseFilesWriteStringRule_name=Use Files.writeString
UseIsEmptyOnCollectionsResolver_message=Use isEmpty() on Strings, Maps, and Collections.
UseIsEmptyOnCollectionsResolver_name=Replace Equality Check with isEmpty()
UseIsEmptyOnCollectionsRule_description=Java 6 introduced isEmpty() on collections and Strings. This rule replaces equality checks involving length() or size() with calls to isEmpty().\n\nFor example, 's.length() == 0' becomes 's.isEmpty()'.\n\nApplying this rule improves readability.
UseIsEmptyOnCollectionsRule_name=Replace Equality Check with isEmpty()
UseListSortRule_description=Replaces static invocations of Collections.sort(list, comparator) with list.sort(comparator).
UseListSortRule_name=Replace Collection.sort with List.sort
UseOffsetBasedStringMethodsRule_description=This rule avoids creating intermediate String instances by making use of the overloaded offset based methods in the String API. For example, if 'substring(beginIndex)' is followed by 'startsWith(aString)', then both invocations are removed and 'startsWith(aString, beginIndex)' is used instead.
UseOffsetBasedStringMethodsRule_name=Use Offset Based String Methods
UseParameterizedJPAQueryRule_description=A query string in the JPQL language (Java Persistence Query Language) may be constructed by concatenating string literals with user defined expressions, therefore they are also vulnerable to SQL injections.\nThis rule looks for queries of type javax.persistence.Query which are created using the createQuery method on javax.persistence.EntityManager.\nThe vulnerable concats of the JPQL query strings are parameterized, thus they can only be considered as data and not as code. 
UseParameterizedJPAQueryRule_name=Use Parameterized JPA Query
UseParameterizedLDAPQueryRule_description=Similar to SQL or JPA queries, the LDAP search statements are also vulnerable to injection attacks. This rule parameterizes potential user supplied input concatenated into an LDAP search filter. This ensures a separation between the intended search filter and the supplied parameters.
UseParameterizedLDAPQueryRule_name=Use Parameterized LDAP Query
UsePatternMatchingForInstanceofRule_description=This rule replaces instanceof expressions by Pattern Matching for instanceof introduced in Java 16. \n\nCommonly, an instanceof expression is followed by a local variable declaration initialized with a casting expression. Pattern Matching for instanceof combines three steps (i.e., type checking, variable declaration, and type casting) into a single step, thus reducing some boilerplate code and eliminating sources of errors.
UsePatternMatchingForInstanceofRule_name=Use Pattern Matching for Instanceof
UsePredefinedStandardCharsetRule_description=This rule replaces invocations of 'Charset.forName(String)' by constants defined in 'StandardCharsets'.
UsePredefinedStandardCharsetRule_name=Use Predefined Standard Charset
UseStringBuilderAppendRule_description=Replaces the infix operator '+' over String concatenations with at least three operands by StringBuilder::append. When possible, unwraps the parenthesized expressions.
UseStringBuilderAppendRule_name=Use StringBuilder::append
UseStringJoinRule_description=Replaces stream Collectors that are used for concatenating values of a collection with StringJoiners.
UseStringJoinRule_name=Use String Join
WelcomeEditor_title=jSparrow
WelcomePage_buy_license_button=Buy a license
WelcomePage_customization_group=Customization
WelcomePage_getting_started_group=Getting started
WelcomePage_guidelines_button=Guidelines
WelcomePage_license_preferences_button=Open license preferences
WelcomePage_market_place_button=Eclipse Marketplace
WelcomePage_preferences_button=Open preferences
WelcomePage_title=jSparrow - Automatic Code Improvement Tool
WhileToForEachRule_description=Applying this rule replaces While-loops over iterators with an equivalent for-loop. Loops where the body modifies the iterator in some way will not be transformed.
WhileToForEachRule_name=Replace While-Loop with Enhanced For-Loop
WizardMessageDialog_selectionDidNotContainAnyJavaFiles=The selection did not contain any Java files.
YAMLConfigurationWrapper_configurationFileNotFoundAtPath=A configuration file has not been found at the given path [{0}]
YAMLConfigUtil_providedPathNotLeadingToYAMLConfig=The provided path ({0}) does not lead to a YAML configuration file\! (File extension must be *.yml or *.yaml)
YAMLConfigUtil_rulesWithUnsatisfiedRequirements=Selected rules with unsatisfied requirements: {0}
