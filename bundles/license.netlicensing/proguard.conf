# Define a base class that is related to the module to have a unique obfuscation for the deobfuscation service
-repackageclasses 'eu.jsparrow.license.netlicensing'

# one keep needs to be definded (even if all access points are possible to obfuscate)
## made up class results in waring
-keep public class this.has.to.be.There
	
-adaptresourcefilecontents OSGI-INF/eu.jsparrow.license.netlicensing.NetlicensingLicenseService.xml
-adaptresourcefilecontents OSGI-INF/eu.jsparrow.license.netlicensing.NetlicensingLicensePersistenceService.xml
-adaptresourcefilecontents OSGI-INF/eu.jsparrow.license.netlicensing.NetlicensingLicenseModelFactoryService.xml

-dontnote org.eclipse.**
-dontnote org.osgi.**
-dontnote javax.xml.**
-dontwarn javax.crypto.**
-dontnote org.xml.sax.**
-dontnote org.w3c.dom.**

-keep class javax.inject.**    
-keep class * implements java.io.Serializable
-keep class * extends java.lang.Enum
#-keep class eu.jsparrow.license.netlicensing.model.DemoLicenseModel {*;}
#-keep class eu.jsparrow.license.netlicensing.model.NetlicensingLicenseModel implements 
#-keep class eu.jsparrow.license.netlicensing.model.NetlicensingLicenseModel {*;}

#-keepclassmembers class eu.jsparrow.license.netlicensing.model.DemoLicenseModel, 
#						eu.jsparrow.license.netlicensing.model.NetlicensingLicenseModel {
#	<fields>;
#}

-keepclassmembers class * extends java.lang.Enum {
    <fields>;
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

-keepclassmembers class * implements java.io.Serializable {
    <fields>;
    <methods>;
     private static final java.io.ObjectStreamField[] serialPersistentFields; 
     private void writeObject(java.io.ObjectOutputStream); 
     private void readObject(java.io.ObjectInputStream); 
     java.lang.Object writeReplace(); 
     java.lang.Object readResolve();
}

 # keeps all fields and Constructors with @Inject
-keepclassmembers,allowobfuscation class * {
    @javax.inject.Inject <fields>;
    @javax.inject.Inject <init>(...);
}
