package eu.jsparrow.rules.common.visitor.helper;

import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.FieldDeclaration;
import org.eclipse.jdt.core.dom.MethodDeclaration;

import eu.jsparrow.rules.common.util.GeneratedNodesUtil;

/**
 * This helper class is used to find and delete generated {@link ASTNode}s
 * (i.e., generated by Lombok). {@link MethodDeclaration} and
 * {@link FieldDeclaration} instances that contain the 'isGenerated' field and
 * have the value set to true, will be identified and deleted from the AST.
 * <p>
 * If the first {@link ASTNode} does not contain the {@code $isGenerated} field,
 * no further checks have to be done since Lombok would have added that field to
 * all nodes.
 * <p>
 * More information can be found in SIM-1578 and related tickets.
 * 
 * @since 3.7.0
 */
public class RemoveGeneratedNodesVisitor extends ASTVisitor {

	private static final String IS_GENERATED_PROPERTY = "$isGenerated"; //$NON-NLS-1$

	private boolean hasIsGeneratedField = true;

	private boolean isGenerated(ASTNode node) {
		boolean retVal = false;

		if (hasIsGeneratedField) {
			hasIsGeneratedField = GeneratedNodesUtil.hasProperty(node, IS_GENERATED_PROPERTY);
			retVal = GeneratedNodesUtil.findPropertyValue(node, IS_GENERATED_PROPERTY);
		}

		return retVal;
	}

	@Override
	public boolean visit(MethodDeclaration node) {
		if (isGenerated(node)) {
			node.delete();
			return false;
		}
		return true;
	}

	@Override
	public boolean visit(FieldDeclaration node) {
		if (isGenerated(node)) {
			node.delete();
			return false;
		}
		return true;
	}

	/**
	 * Will return false if no {@code $isGenerated} field is present in a node.
	 * 
	 * That name makes sense, if you think about it.
	 * 
	 * @return
	 */
	public boolean isHasIsGeneratedField() {
		return hasIsGeneratedField;
	}

}
