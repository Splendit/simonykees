package eu.jsparrow.rules.common.visitor.helper;

import java.lang.reflect.Field;

import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.FieldDeclaration;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This helper class is used to find and delete generated {@link ASTNode}s
 * (i.e., generated by Lombok). {@link MethodDeclaration} and
 * {@link FieldDeclaration} instances that contain the 'isGenerated' field and
 * have the value set to true, will be identified and deleted from the AST.
 * <p>
 * If the first {@link ASTNode} does not contain the {@code $isGenerated} field,
 * no further checks have to be done since Lombok would have added that field to
 * all nodes.
 * <p>
 * More information can be found in SIM-1578 and related tickets.
 * 
 * @since 3.7.0
 */
public class RemoveGeneratedNodesASTVisitor extends ASTVisitor {

	private static final Logger logger = LoggerFactory.getLogger(RemoveGeneratedNodesASTVisitor.class);

	private boolean hasIsGeneratedField = true;

	private boolean isGenerated(ASTNode node) {
		boolean retVal = false;

		if (hasIsGeneratedField) {
			Field field = null;
			try {
				field = node.getClass()
					.getField("$isGenerated"); //$NON-NLS-1$
				retVal = (boolean) field.getBoolean(node);
			} catch (NoSuchFieldException e) {
				hasIsGeneratedField = false;
				logger.debug("No $isGenerated field present. No further checks for it will be performed."); //$NON-NLS-1$
			} catch (SecurityException | IllegalAccessException | IllegalArgumentException e) {
				logger.error("Unable to access node", e); //$NON-NLS-1$
			}
		}

		return retVal;
	}

	@Override
	public boolean visit(MethodDeclaration node) {
		if (isGenerated(node)) {
			node.delete();
		}
		return false;
	}

	@Override
	public boolean visit(FieldDeclaration node) {
		if (isGenerated(node)) {
			node.delete();
		}
		return false;
	}

	/**
	 * Will return false if no {@code $isGenerated} field is present in a node.
	 * 
	 * That name makes sense, if you think about it.
	 * 
	 * @return
	 */
	public boolean isHasIsGeneratedField() {
		return hasIsGeneratedField;
	}

}
