package eu.jsparrow.core.visitor.unused.methods;

public class UnusedMethodsSampleSources {

        public static final String ROOT_PACKAGE_NAME = "eu.jsparrow.core";
        public static final String CORE_PACKAGE = "package " + ROOT_PACKAGE_NAME + ";"
        		+ "";
        
        public static final String BLACK_HOLE = CORE_PACKAGE + "\n"
        		+ "import java.util.function.Consumer;\n"
        		+ "\n"
        		+ "public class BlackHole {\n"
        		+ "\n"
        		+ "        public void use() {\n"
        		+ "                UnusedPublicMethods unusedPublic = new UnusedPublicMethods();\n"
        		+ "                unusedPublic.usedInMethodInvocationExternally();\n"
        		+ "                Consumer<UnusedPublicMethods> consumer = UnusedPublicMethods::usedInTypeMethodReference;\n"
        		+ "                consumer.accept(unusedPublic);\n"
        		+ "                \n"
        		+ "                UnusedPackagePrivateMethods unusedPackagePrivate = new UnusedPackagePrivateMethods();\n"
        		+ "                unusedPackagePrivate.usedExternally();\n"
        		+ "        }\n"
        		+ "\n"
        		+ "        public static void main(String[]args) {\n"
        		+ "                BlackHole blackHole = new BlackHole();\n"
        		+ "                blackHole.use();\n"
        		+ "        }\n"
        		+ "}";
        
        public static final String UNUSED_PUBLIC_METHODS = CORE_PACKAGE + "\n"
        		+ "public class UnusedPublicMethods {\n"
        		+ "        \n"
        		+ "        public UnusedPublicMethods() {\n"
        		+ "                /*\n"
        		+ "                 * Default constructor - should not be removed. \n"
        		+ "                 */\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public UnusedPublicMethods(String value) {\n"
        		+ "                /*\n"
        		+ "                 * Initially, the constructors are not removed. \n"
        		+ "                 */\n"
        		+ "        }\n"
        		+ "\n"
        		+ "        public void unusedMethod() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public void usedInExpressionMethodReference() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public void usedInTypeMethodReference() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public void usedInSuperMethodReference() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public void usedInMethodInvocationInternally() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public void usedInMethodInvocationExternally() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public void usedInSuperMethodInvocation() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        void blackHole() {\n"
        		+ "                usedInMethodInvocationInternally();\n"
        		+ "                Runnable r = this::usedInExpressionMethodReference;\n"
        		+ "                r.run();\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public static void main(String[]args) {\n"
        		+ "                UnusedPublicMethods unusedPublicMethod = new UnusedPublicMethods();\n"
        		+ "                unusedPublicMethod.blackHole();\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public boolean equals(Object other) {\n"
        		+ "                return false;\n"
        		+ "        }\n"
        		+ "}";
        public static final String UNUSED_PUBLIC_METHODS_SUBCLASS = CORE_PACKAGE + "\n"
        		+ "public class UnusedPublicMethodsSubclass extends UnusedPublicMethods {\n"
        		+ "\n"
        		+ "        void consume() {\n"
        		+ "                super.usedInSuperMethodInvocation();\n"
        		+ "                Runnable r = super::usedInSuperMethodReference;\n"
        		+ "                r.run();\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public static void main(String[]args) {\n"
        		+ "                UnusedPublicMethodsSubclass object = new UnusedPublicMethodsSubclass();\n"
        		+ "                object.consume();\n"
        		+ "        }\n"
        		+ "}";
        
        public static final String UNUSED_PROTECTED_METHODS = CORE_PACKAGE + "\n"
        		+ "public class UnusedProtectedMethods {\n"
        		+ "\n"
        		+ "        protected void unusedMethod() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "\n"
        		+ "        protected void unusedOverriden() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "\n"
        		+ "        protected void usedInternally() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "\n"
        		+ "        protected void usedExternally() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "\n"
        		+ "        public static void main(String[] args) {\n"
        		+ "                UnusedProtectedMethods object = new UnusedProtectedMethods();\n"
        		+ "                object.usedInternally();\n"
        		+ "        }\n"
        		+ "}";
        public static final String UNUSED_PROTECTED_METHODS_SUBCLASS = CORE_PACKAGE + "\n"
        		+ "public class UnusedProtectedMethodsSubclass extends UnusedProtectedMethods {\n"
        		+ "        void consume() {\n"
        		+ "                usedExternally();\n"
        		+ "        }\n"
        		+ "\n"
        		+ "        @Override\n"
        		+ "        protected void unusedOverriden() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "\n"
        		+ "        public static void main(String[] args) {\n"
        		+ "                UnusedProtectedMethodsSubclass object = new UnusedProtectedMethodsSubclass();\n"
        		+ "                object.consume();\n"
        		+ "        }\n"
        		+ "}";
        
        public static final String UNUSED_PACKAGE_PRIVATE_METHODS = CORE_PACKAGE + "\n"
        		+ "public class UnusedPackagePrivateMethods {\n"
        		+ "\n"
        		+ "        void unusedMethod() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "\n"
        		+ "        void usedInternally() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "\n"
        		+ "        void usedExternally() {\n"
        		+ "                // do nothing\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public static void main(String[]args) {\n"
        		+ "                UnusedPackagePrivateMethods unused = new UnusedPackagePrivateMethods();\n"
        		+ "                unused.usedInternally();\n"
        		+ "        }\n"
        		+ "}";
        
        public static final String UNUSED_PRIVATE_METHODS = CORE_PACKAGE + "\n"
        		+ "public class UnusedPrivateMethods {\n"
        		+ "\n"
        		+ "        private void unusedPrivateMethod() {\n"
        		+ "                \n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        private void usedInMethodReference() {\n"
        		+ "                // Do nothing\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        private void usedWithMethodInvocation() {\n"
        		+ "                // Do nothing\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        void blackHole() {\n"
        		+ "                Runnable r = this::usedInMethodReference;\n"
        		+ "                r.run();\n"
        		+ "                usedWithMethodInvocation();\n"
        		+ "        }\n"
        		+ "        \n"
        		+ "        public static void main(String[]args) {\n"
        		+ "                UnusedPrivateMethods unusedPrivateMethods = new UnusedPrivateMethods();\n"
        		+ "                unusedPrivateMethods.blackHole();\n"
        		+ "        }\n"
        		+ "}";


}
